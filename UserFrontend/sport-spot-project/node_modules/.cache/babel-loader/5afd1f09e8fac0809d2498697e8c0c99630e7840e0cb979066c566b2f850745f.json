{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport { mapActions } from 'vuex';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required } from '@vuelidate/validators';\nexport default {\n  name: \"CamerasPage\",\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      camera: {\n        name: '',\n        IP: '',\n        channel: '',\n        codec: '',\n        login: '',\n        password: ''\n      }\n    };\n  },\n  validations: {\n    camera: {\n      name: {\n        required\n      },\n      IP: {\n        required\n      },\n      channel: {\n        required\n      },\n      codec: {\n        required\n      },\n      login: {\n        required\n      },\n      password: {\n        required\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['getCameras'])\n  },\n  methods: {\n    saveCamera() {\n      this.v$.camera.$touch();\n      if (!this.v$.camera.$error) {\n        console.log('Валидация прошла успешно');\n        this.addCamera(this.camera);\n      } else console.log('Валидация не прошла');\n    },\n    ...mapActions(['addCamera'])\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","useVuelidate","required","name","setup","v$","data","camera","IP","channel","codec","login","password","validations","computed","methods","saveCamera","$touch","$error","console","log","addCamera"],"sources":["D:\\GitHub\\SportSpot\\UserFrontend\\sport-spot-project\\src\\components\\CamerasPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container\" >\r\n      <div class=\"row justify-content-around\">\r\n        <div class=\"col-2\" >\r\n          <div class=\"row camera\" v-for=\"(camera, index) in getCameras\"\r\n               :key=\"index\">\r\n            <label >{{camera.name}}</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-4 add-camera form-group\">\r\n          <form @submit.prevent=\"saveCamera\" style=\"margin-top: 10px\">\r\n            <div class=\"form-group\">\r\n              <label> Название: </label>\r\n              <input class=\"form-control input-field\" type=\"text\" v-model.trim=\"camera.name\"\r\n                     :class=\"v$.camera.name.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.name.$dirty && v$.camera.name.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label> IP: </label>\r\n              <input class=\"form-control\" type=\"text\" v-model.trim=\"camera.IP\"\r\n                     :class=\"v$.camera.IP.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.IP.$dirty && v$.camera.IP.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label> Канал: </label>\r\n              <input class=\"form-control\" type=\"text\" v-model.trim=\"camera.channel\"\r\n                     :class=\"v$.camera.channel.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.channel.$dirty && v$.camera.channel.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label> Кодек: </label>\r\n              <input class=\"form-control\" type=\"text\" v-model.trim=\"camera.codec\"\r\n                     :class=\"v$.camera.codec.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.codec.$dirty && v$.camera.codec.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label> Логин: </label>\r\n              <input class=\"form-control\" type=\"text\" v-model.trim=\"camera.login\"\r\n                     :class=\"v$.camera.login.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.login.$dirty && v$.camera.login.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label> Пароль: </label>\r\n              <input class=\"form-control\" type=\"text\" v-model.trim=\"camera.password\"\r\n                     :class=\"v$.camera.password.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.password.$dirty && v$.camera.password.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"row form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" >Сохранить камеру</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from 'vuex'\r\nimport {mapActions} from 'vuex'\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required} from '@vuelidate/validators'\r\n\r\nexport default {\r\n  name: \"CamerasPage\",\r\n  setup () {\r\n    return {\r\n      v$: useVuelidate()\r\n    }\r\n  },\r\n  data(){\r\n    return {\r\n      camera: {\r\n        name: '',\r\n        IP: '',\r\n        channel : '',\r\n        codec : '',\r\n        login : '',\r\n        password : ''\r\n      }\r\n    }\r\n  },\r\n  validations: {\r\n    camera: {\r\n      name: {required},\r\n      IP: {required},\r\n      channel: {required},\r\n      codec: {required},\r\n      login: { required },\r\n      password: {required},\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n        'getCameras'\r\n    ]),\r\n  },\r\n  methods: {\r\n    saveCamera() {\r\n      this.v$.camera.$touch()\r\n      if (!this.v$.camera.$error) {\r\n        console.log('Валидация прошла успешно')\r\n        this.addCamera(this.camera)\r\n      }\r\n      else console.log('Валидация не прошла')\r\n    },\r\n    ...mapActions([\r\n      'addCamera'\r\n    ])\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.camera{\r\n  box-shadow: 0 3px 4px rgba(0,0,0,.25);\r\n  border-radius: 10px ;\r\n}\r\n.add-camera{\r\n  box-shadow: 0 3px 4px rgba(0,0,0,.25);\r\n  border-radius: 10px ;\r\n}\r\n.input-field{\r\n  width: 200px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  margin-left: 90px;\r\n}\r\n</style>"],"mappings":"AAwEA,SAAQA,UAAU,QAAO,MAAK;AAC9B,SAAQC,UAAU,QAAO,MAAK;AAC9B,SAASC,YAAW,QAAS,iBAAgB;AAC7C,SAASC,QAAQ,QAAO,uBAAsB;AAE9C,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAIA,CAAA,EAAK;IACP,OAAO;MACLC,EAAE,EAAEJ,YAAY,CAAC;IACnB;EACF,CAAC;EACDK,IAAIA,CAAA,EAAE;IACJ,OAAO;MACLC,MAAM,EAAE;QACNJ,IAAI,EAAE,EAAE;QACRK,EAAE,EAAE,EAAE;QACNC,OAAM,EAAI,EAAE;QACZC,KAAI,EAAI,EAAE;QACVC,KAAI,EAAI,EAAE;QACVC,QAAO,EAAI;MACb;IACF;EACF,CAAC;EACDC,WAAW,EAAE;IACXN,MAAM,EAAE;MACNJ,IAAI,EAAE;QAACD;MAAQ,CAAC;MAChBM,EAAE,EAAE;QAACN;MAAQ,CAAC;MACdO,OAAO,EAAE;QAACP;MAAQ,CAAC;MACnBQ,KAAK,EAAE;QAACR;MAAQ,CAAC;MACjBS,KAAK,EAAE;QAAET;MAAS,CAAC;MACnBU,QAAQ,EAAE;QAACV;MAAQ;IACrB;EACF,CAAC;EACDY,QAAQ,EAAE;IACR,GAAGf,UAAU,CAAC,CACV,YAAW,CACd;EACH,CAAC;EACDgB,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACX,EAAE,CAACE,MAAM,CAACU,MAAM,CAAC;MACtB,IAAI,CAAC,IAAI,CAACZ,EAAE,CAACE,MAAM,CAACW,MAAM,EAAE;QAC1BC,OAAO,CAACC,GAAG,CAAC,0BAA0B;QACtC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACd,MAAM;MAC5B,OACKY,OAAO,CAACC,GAAG,CAAC,qBAAqB;IACxC,CAAC;IACD,GAAGpB,UAAU,CAAC,CACZ,WAAU,CACX;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}