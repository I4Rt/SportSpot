{"ast":null,"code":"import { useVuelidate } from '@vuelidate/core';\nimport { required, minLength } from '@vuelidate/validators';\nexport default {\n  name: \"NewRegistration\",\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      user: {\n        login: '',\n        // email: '',\n        password: '',\n        country: 'Russia',\n        agreeWithRules: false\n      },\n      countries: ['Russia', 'USA', 'French'],\n      accessToken: ''\n    };\n  },\n  validations: {\n    user: {\n      login: {\n        required,\n        minLength: minLength(3)\n      },\n      password: {\n        required,\n        minLength: minLength(3)\n      }\n    }\n  },\n  methods: {\n    checkForm() {\n      this.v$.user.$touch();\n      if (!this.v$.user.$error) {\n        console.log('Валидация прошла успешно');\n      } else console.log('Валидация не прошла');\n    },\n    created() {\n      console.log('post request');\n      fetch('http://192.168.43.243:5000/authorize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          'login': this.user.login,\n          \"password\": this.user.password\n        })\n      }).then(response => this.accessToken = response.text()).then(response => {\n        console.log(response);\n      });\n      console.log(this.accessToken);\n    },\n    request() {\n      fetch('http://192.168.43.243:5000/getTestData', {\n        method: 'POST',\n        headers: {\n          'Authentication': 'Bearer {' + this.accessToken + '}',\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.text()).then(response => {\n        console.log(response);\n      });\n    }\n  }\n};","map":{"version":3,"names":["useVuelidate","required","minLength","name","setup","v$","data","user","login","password","country","agreeWithRules","countries","accessToken","validations","methods","checkForm","$touch","$error","console","log","created","fetch","method","headers","body","JSON","stringify","then","response","text","request"],"sources":["D:\\GitHub\\SportSpot\\UserFrontend\\sport-spot-project\\src\\components\\NewRegistation.vue"],"sourcesContent":["<template>\r\n<div class=\"container\">\r\n    <form @submit.prevent=\"checkForm\">\r\n        <div class=\"form-group\">\r\n            <label for=\"login\">Login: </label>\r\n            <input type=\"text\" v-model.trim=\"user.login\" class=\"form-control\"\r\n             :class=\"v$.user.login.$error ? 'is-invalid' : ''\">\r\n             <p v-if=\"v$.user.login.$dirty && v$.user.login.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n            </p>\r\n             <p v-if=\"v$.user.login.$dirty && v$.user.login.minLength.$invalid\" class=\"invalid-feedback\">\r\n                Поле должно содержать минимум 5 символов\r\n            </p>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"password\">Password: </label>\r\n            <input type=\"password\" v-model.trim=\"user.password\" class=\"form-control\"\r\n            :class=\"v$.user.password.$error ? 'is-invalid' : ''\">\r\n            <p v-if=\"v$.user.password.$dirty && v$.user.password.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n            </p>\r\n             <p v-if=\"v$.user.password.$dirty && v$.user.password.minLength.$invalid\" class=\"invalid-feedback\">\r\n                Поле должно содержать минимум 5 символов\r\n            </p>\r\n        </div >\r\n        <div class=\"row justify-content-around form-group\">\r\n            <button type=\"submit\" class=\"btn btn-primary col-auto\" @click=\"created\">Войти</button>\r\n            <button class=\"btn btn-success col-auto\" @click=\"request\">Отправить запрос</button>\r\n        </div>\r\n        \r\n    </form>\r\n</div>\r\n    \r\n</template>\r\n\r\n<script>\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, minLength } from '@vuelidate/validators'\r\n\r\n    export default{\r\n        name: \"NewRegistration\",\r\n        setup () {\r\n            return {\r\n                v$: useVuelidate()\r\n            }\r\n        },\r\n        data(){\r\n            return {\r\n                user: {\r\n                    login: '',\r\n                    // email: '',\r\n                    password: '',\r\n                    country: 'Russia',\r\n                    agreeWithRules: false,\r\n                },\r\n                countries: ['Russia', 'USA', 'French'],\r\n                accessToken: ''\r\n\r\n            }\r\n        },\r\n        validations: {\r\n            user: {\r\n                login: { required, minLength: minLength(3) },\r\n                password: {required, minLength: minLength(3)},\r\n            }\r\n        },\r\n        methods: {\r\n            checkForm() {\r\n                this.v$.user.$touch()\r\n                if (!this.v$.user.$error) {\r\n                    console.log('Валидация прошла успешно')\r\n                }\r\n                else console.log('Валидация не прошла')\r\n            },\r\n\r\n            created() {\r\n                console.log('post request')\r\n                    fetch('http://192.168.43.243:5000/authorize', {\r\n                          method: 'POST',\r\n                          headers: {\r\n                            'Content-Type': 'application/json;charset=utf-8'\r\n                          },\r\n                          body: JSON.stringify({'login': this.user.login, \"password\": this.user.password})\r\n                        })\r\n                        .then(response => this.accessToken = response.text())\r\n                        .then((response) => {\r\n                            console.log(response)\r\n                        });\r\n                        console.log(this.accessToken)\r\n            },\r\n            request() {\r\n                fetch('http://192.168.43.243:5000/getTestData', {\r\n                          method: 'POST',\r\n                          headers: {\r\n                            'Authentication': 'Bearer {' + this.accessToken +'}',\r\n                            'Content-Type': 'application/json;charset=utf-8'\r\n                          }\r\n                        })\r\n                        .then(response => response.text())\r\n                        .then((response) => {\r\n                            console.log(response)\r\n                        });\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n.container {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n  margin-top: 40px;\r\n}\r\n.form-control {\r\n  width: 400px;\r\n}\r\n.form-group {\r\n    width: 400px;\r\n}\r\n.btn-login {\r\n    width: 200px;\r\n    align-content: center;\r\n}\r\n\r\n</style>"],"mappings":"AAoCA,SAASA,YAAW,QAAS,iBAAgB;AAC7C,SAASC,QAAQ,EAAEC,SAAQ,QAAS,uBAAsB;AAEtD,eAAc;EACVC,IAAI,EAAE,iBAAiB;EACvBC,KAAIA,CAAA,EAAK;IACL,OAAO;MACHC,EAAE,EAAEL,YAAY,CAAC;IACrB;EACJ,CAAC;EACDM,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,IAAI,EAAE;QACFC,KAAK,EAAE,EAAE;QACT;QACAC,QAAQ,EAAE,EAAE;QACZC,OAAO,EAAE,QAAQ;QACjBC,cAAc,EAAE;MACpB,CAAC;MACDC,SAAS,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC;MACtCC,WAAW,EAAE;IAEjB;EACJ,CAAC;EACDC,WAAW,EAAE;IACTP,IAAI,EAAE;MACFC,KAAK,EAAE;QAAEP,QAAQ;QAAEC,SAAS,EAAEA,SAAS,CAAC,CAAC;MAAE,CAAC;MAC5CO,QAAQ,EAAE;QAACR,QAAQ;QAAEC,SAAS,EAAEA,SAAS,CAAC,CAAC;MAAC;IAChD;EACJ,CAAC;EACDa,OAAO,EAAE;IACLC,SAASA,CAAA,EAAG;MACR,IAAI,CAACX,EAAE,CAACE,IAAI,CAACU,MAAM,CAAC;MACpB,IAAI,CAAC,IAAI,CAACZ,EAAE,CAACE,IAAI,CAACW,MAAM,EAAE;QACtBC,OAAO,CAACC,GAAG,CAAC,0BAA0B;MAC1C,OACKD,OAAO,CAACC,GAAG,CAAC,qBAAqB;IAC1C,CAAC;IAEDC,OAAOA,CAAA,EAAG;MACNF,OAAO,CAACC,GAAG,CAAC,cAAc;MACtBE,KAAK,CAAC,sCAAsC,EAAE;QACxCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAC,OAAO,EAAE,IAAI,CAACpB,IAAI,CAACC,KAAK;UAAE,UAAU,EAAE,IAAI,CAACD,IAAI,CAACE;QAAQ,CAAC;MACjF,CAAC,EACAmB,IAAI,CAACC,QAAO,IAAK,IAAI,CAAChB,WAAU,GAAIgB,QAAQ,CAACC,IAAI,CAAC,CAAC,EACnDF,IAAI,CAAEC,QAAQ,IAAK;QAChBV,OAAO,CAACC,GAAG,CAACS,QAAQ;MACxB,CAAC,CAAC;MACFV,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,WAAW;IACxC,CAAC;IACDkB,OAAOA,CAAA,EAAG;MACNT,KAAK,CAAC,wCAAwC,EAAE;QACtCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,gBAAgB,EAAE,UAAS,GAAI,IAAI,CAACX,WAAU,GAAG,GAAG;UACpD,cAAc,EAAE;QAClB;MACF,CAAC,EACAe,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAAEC,QAAQ,IAAK;QAChBV,OAAO,CAACC,GAAG,CAACS,QAAQ;MACxB,CAAC,CAAC;IACd;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}