{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { createApp } from 'vue'\nimport { createStore } from 'vuex';\n// import axios from \"axios\";\n\nexport default createStore({\n  state() {\n    return {\n      cameraCount: 0,\n      roomCount: 0,\n      cameras: [],\n      rooms: [],\n      sectors: [],\n      sectorTypes: ['ПОЛ', 'ЗЕРКАЛО']\n    };\n  },\n  mutations: {\n    setCameras(state, camera) {\n      state.cameras.push(camera);\n    },\n    removeCamera(state, id) {\n      state.cameras = state.cameras.filter(camera => camera.id !== id);\n    },\n    updateCamera(state, oldCamera, newCamera) {\n      oldCamera = newCamera;\n    },\n    setRooms(state, room) {\n      state.rooms.push(room);\n    },\n    setSector(state, sector) {\n      state.rooms.push(sector);\n    },\n    setCameraCount(state, cameraCount) {\n      state.cameraCount = cameraCount;\n    },\n    setRoomCount(state, roomCount) {\n      state.roomCount = roomCount;\n    }\n  },\n  actions: {\n    addCamera({\n      commit\n    }, newCamera) {\n      commit('setCameras', newCamera);\n    },\n    async removeCamera({\n      commit\n    }, id) {\n      console.log('remove');\n      await fetch(`http://localhost:5000/removeCamera?id=${id}`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        if (response.OperationStatus === \"Done\") {\n          commit('removeCamera', id);\n        }\n      });\n    },\n    // async updateCamera()\n    addRoom({\n      commit\n    }, newRoom) {\n      commit('setRooms', newRoom);\n    },\n    addCameraCount({\n      commit\n    }, cameraCount) {\n      commit('setCameraCount', cameraCount);\n    },\n    addRoomCount({\n      commit\n    }, roomCount) {\n      commit('setRoomCount', roomCount);\n    }\n  },\n  getters: {\n    getCameras(state) {\n      return state.cameras;\n    },\n    getCameraByID: state => id => {\n      return state.cameras.find(camera => camera.id === id);\n    },\n    getCameraIndex: state => id => {\n      return state.cameras.findIndex(camera => camera.id === id);\n    },\n    getCamerasByRoomID: state => id => {\n      return state.cameras.filter(camera => camera.roomID === id);\n    },\n    getCamerasWithoutRoomID(state) {\n      return state.cameras.filter(camera => camera.roomID === -1);\n    },\n    getRooms(state) {\n      return state.rooms;\n    },\n    getRoomByID: state => id => {\n      return state.rooms.find(room => room.id === id);\n    },\n    getSectorTypes(state) {\n      return state.sectorTypes;\n    },\n    getCameraCount(state) {\n      return state.cameraCount;\n    },\n    getRoomCount(state) {\n      return state.roomCount;\n    }\n  }\n});","map":{"version":3,"names":["createStore","state","cameraCount","roomCount","cameras","rooms","sectors","sectorTypes","mutations","setCameras","camera","push","removeCamera","id","filter","updateCamera","oldCamera","newCamera","setRooms","room","setSector","sector","setCameraCount","setRoomCount","actions","addCamera","commit","console","log","fetch","method","cors","headers","then","response","json","OperationStatus","addRoom","newRoom","addCameraCount","addRoomCount","getters","getCameras","getCameraByID","find","getCameraIndex","findIndex","getCamerasByRoomID","roomID","getCamerasWithoutRoomID","getRooms","getRoomByID","getSectorTypes","getCameraCount","getRoomCount"],"sources":["D:/GitHub/SportSpot/UserFrontend/sport-spot-project/src/vuex/store.js"],"sourcesContent":["// import { createApp } from 'vue'\r\nimport { createStore } from 'vuex'\r\n// import axios from \"axios\";\r\n\r\nexport default createStore({\r\n    state () {\r\n        return {\r\n            cameraCount: 0,\r\n            roomCount: 0,\r\n            cameras: [],\r\n            rooms: [],\r\n            sectors: [],\r\n            sectorTypes: ['ПОЛ', 'ЗЕРКАЛО']\r\n        }\r\n    },\r\n    mutations: {\r\n        setCameras (state, camera) {\r\n            state.cameras.push(camera)\r\n        },\r\n        removeCamera (state, id) {\r\n            state.cameras = state.cameras.filter((camera) => camera.id !== id)\r\n        },\r\n        updateCamera (state, oldCamera, newCamera) {\r\n            oldCamera = newCamera\r\n        },\r\n        setRooms (state, room) {\r\n            state.rooms.push(room)\r\n        },\r\n        setSector (state, sector) {\r\n            state.rooms.push(sector)\r\n        },\r\n        setCameraCount (state, cameraCount) {\r\n            state.cameraCount = cameraCount\r\n        },\r\n        setRoomCount (state, roomCount) {\r\n            state.roomCount = roomCount\r\n        }\r\n    },\r\n    actions: {\r\n        addCamera({commit}, newCamera) {\r\n            commit('setCameras', newCamera)\r\n        },\r\n        async removeCamera({commit}, id) {\r\n            console.log('remove')\r\n            await fetch(`http://localhost:5000/removeCamera?id=${id}`, {\r\n                method: 'GET',\r\n                cors: 'no-cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8',\r\n                },\r\n            })\r\n                .then(response => response.json())\r\n                .then((response) => {\r\n                    if (response.OperationStatus === \"Done\"){\r\n                        commit('removeCamera', id)\r\n                    }\r\n                })\r\n        },\r\n        // async updateCamera()\r\n        addRoom({commit}, newRoom) {\r\n            commit('setRooms', newRoom)\r\n        },\r\n        addCameraCount({commit}, cameraCount) {\r\n            commit('setCameraCount', cameraCount)\r\n        },\r\n        addRoomCount({commit}, roomCount) {\r\n            commit('setRoomCount', roomCount)\r\n        }\r\n    },\r\n    getters: {\r\n        getCameras(state) {\r\n            return state.cameras\r\n        },\r\n        getCameraByID: (state) => (id) => {\r\n            return state.cameras.find(camera => camera.id === id)\r\n        },\r\n        getCameraIndex: (state) => (id) => {\r\n            return state.cameras.findIndex(camera => camera.id === id)\r\n        },\r\n        getCamerasByRoomID: (state) => (id) => {\r\n          return state.cameras.filter(camera => camera.roomID === id)\r\n        },\r\n        getCamerasWithoutRoomID (state) {\r\n            return state.cameras.filter(camera => camera.roomID === -1)\r\n        },\r\n        getRooms(state) {\r\n            return state.rooms\r\n        },\r\n        getRoomByID: (state) => (id) => {\r\n            return state.rooms.find(room => room.id === id)\r\n        },\r\n        getSectorTypes(state) {\r\n            return state.sectorTypes\r\n        },\r\n        getCameraCount(state) {\r\n            return state.cameraCount\r\n        },\r\n        getRoomCount(state) {\r\n            return state.roomCount\r\n        }\r\n    }\r\n})\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}