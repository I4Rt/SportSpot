{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, vModelSelect as _vModelSelect, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-e4fe0dc6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"row justify-content-around\"\n};\nconst _hoisted_3 = {\n  class: \"col-3\"\n};\nconst _hoisted_4 = {\n  class: \"row\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  class: \"field\"\n}, \"Камеры\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"col-4\"\n}, [/*#__PURE__*/_createElementVNode(\"label\", {\n  class: \"field\"\n}, \"Настройка\")], -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"col-5\"\n}, [/*#__PURE__*/_createElementVNode(\"label\", {\n  class: \"field\"\n}, \"Просмотр\")], -1 /* HOISTED */));\nconst _hoisted_8 = {\n  class: \"col-3\"\n};\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  class: \"cam-name\"\n};\nconst _hoisted_11 = {\n  class: \"cam-ip\"\n};\nconst _hoisted_12 = {\n  class: \"col-4 window\"\n};\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  style: {\n    \"font-weight\": \"700\",\n    \"margin-top\": \"10px\"\n  }\n}, \"Изображение\", -1 /* HOISTED */));\nconst _hoisted_14 = {\n  class: \"\"\n};\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \" Название: \", -1 /* HOISTED */));\nconst _hoisted_16 = {\n  key: 0,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_17 = {\n  class: \"\"\n};\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \" ip: \", -1 /* HOISTED */));\nconst _hoisted_19 = {\n  key: 0,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_20 = {\n  class: \"\"\n};\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \" Порт: \", -1 /* HOISTED */));\nconst _hoisted_22 = {\n  key: 0,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_23 = {\n  key: 1,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_24 = {\n  class: \"\"\n};\nconst _hoisted_25 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \" Канал: \", -1 /* HOISTED */));\nconst _hoisted_26 = {\n  key: 0,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_27 = {\n  key: 1,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_28 = {\n  class: \"\"\n};\nconst _hoisted_29 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \" Кодек: \", -1 /* HOISTED */));\nconst _hoisted_30 = {\n  key: 0,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_31 = {\n  class: \"\"\n};\nconst _hoisted_32 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \" Логин: \", -1 /* HOISTED */));\nconst _hoisted_33 = {\n  key: 0,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_34 = {\n  class: \"\"\n};\nconst _hoisted_35 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \" Пароль: \", -1 /* HOISTED */));\nconst _hoisted_36 = {\n  key: 0,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_37 = {\n  class: \"\"\n};\nconst _hoisted_38 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \" Полный путь: \", -1 /* HOISTED */));\nconst _hoisted_39 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"width\": \"50px\",\n    \"margin-bottom\": \"10px\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\",\n  class: \"btn btn-success\"\n}, \"Сохранить\")], -1 /* HOISTED */));\nconst _hoisted_40 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  style: {\n    \"font-weight\": \"700\"\n  }\n}, \"Сектора\", -1 /* HOISTED */));\nconst _hoisted_41 = {\n  key: 0,\n  id: \"preloaded\",\n  class: \"hidden\"\n};\nconst _hoisted_42 = [\"onUpdate:modelValue\"];\nconst _hoisted_43 = [\"onUpdate:modelValue\"];\nconst _hoisted_44 = [\"value\"];\nconst _hoisted_45 = [\"onClick\"];\nconst _hoisted_46 = [\"src\"];\nconst _hoisted_47 = [\"src\"];\nconst _hoisted_48 = [\"onClick\"];\nconst _hoisted_49 = [\"src\"];\nconst _hoisted_50 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_51 = {\n  class: \"col-5\"\n};\nconst _hoisted_52 = {\n  class: \"col-12 window\"\n};\nconst _hoisted_53 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Изображение\", -1 /* HOISTED */));\nconst _hoisted_54 = {\n  style: {\n    \"width\": \"300px\",\n    \"height\": \"300px\"\n  }\n};\nconst _hoisted_55 = {\n  key: 0,\n  id: \"camImg\",\n  src: \"\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  },\n  alt: \"\"\n};\nconst _hoisted_56 = [\"src\"];\nconst _hoisted_57 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_58 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Информация сектора\", -1 /* HOISTED */));\nconst _hoisted_59 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"Техническая информация:\", -1 /* HOISTED */));\nconst _hoisted_60 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"li\", null, \"Границы:\", -1 /* HOISTED */));\nconst _hoisted_61 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"li\", null, \"Высота от пола:\", -1 /* HOISTED */));\nconst _hoisted_62 = {\n  key: 0\n};\nconst _hoisted_63 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Справка:\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"button\", {\n    class: \"add\",\n    style: {\n      \"margin-top\": \"5px\"\n    },\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.resetCamera && $options.resetCamera(...args))\n  }, \"Добавить\")])]), _hoisted_6, _hoisted_7, _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.getCameras, (camera, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"row window camera col-12\",\n      onClick: $event => $options.chooseCamera(camera),\n      key: index\n    }, [_createElementVNode(\"span\", _hoisted_10, _toDisplayString(camera.name), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_11, _toDisplayString(camera.ip), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_12, [_hoisted_13, _createElementVNode(\"form\", {\n    onSubmit: _cache[9] || (_cache[9] = _withModifiers((...args) => $options.save && $options.save(...args), [\"prevent\"])),\n    style: {\n      \"margin-top\": \"10px\"\n    }\n  }, [_createElementVNode(\"div\", _hoisted_14, [_hoisted_15, _withDirectives(_createElementVNode(\"input\", {\n    class: _normalizeClass([\"input-field\", $setup.v$.camera.name.$error ? 'is-invalid' : '']),\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.camera.name = $event)\n  }, null, 2 /* CLASS */), [[_vModelText, $data.camera.name, void 0, {\n    trim: true\n  }]]), $setup.v$.camera.name.$dirty && $setup.v$.camera.name.required.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_16, \" Обязательное поле \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_17, [_hoisted_18, _withDirectives(_createElementVNode(\"input\", {\n    class: _normalizeClass([\"input-field\", $setup.v$.camera.ip.$error ? 'is-invalid' : '']),\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.camera.ip = $event)\n  }, null, 2 /* CLASS */), [[_vModelText, $data.camera.ip, void 0, {\n    trim: true\n  }]]), $setup.v$.camera.ip.$dirty && $setup.v$.camera.ip.required.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_19, \" Обязательное поле \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_20, [_hoisted_21, _withDirectives(_createElementVNode(\"input\", {\n    class: _normalizeClass([\"input-field\", $setup.v$.camera.port.$error ? 'is-invalid' : '']),\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.camera.port = $event)\n  }, null, 2 /* CLASS */), [[_vModelText, $data.camera.port, void 0, {\n    trim: true\n  }]]), $setup.v$.camera.port.$dirty && $setup.v$.camera.port.required.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_22, \" Обязательное поле \")) : _createCommentVNode(\"v-if\", true), $setup.v$.camera.port.$dirty && $setup.v$.camera.port.integer.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_23, \" Значение должно быть числовым \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_24, [_hoisted_25, _withDirectives(_createElementVNode(\"input\", {\n    class: _normalizeClass([\"input-field\", $setup.v$.camera.chanel.$error ? 'is-invalid' : '']),\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.camera.chanel = $event)\n  }, null, 2 /* CLASS */), [[_vModelText, $data.camera.chanel, void 0, {\n    trim: true\n  }]]), $setup.v$.camera.chanel.$dirty && $setup.v$.camera.chanel.required.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_26, \" Обязательное поле \")) : _createCommentVNode(\"v-if\", true), $setup.v$.camera.chanel.$dirty && $setup.v$.camera.chanel.integer.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_27, \" Значение должно быть числовым \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_28, [_hoisted_29, _withDirectives(_createElementVNode(\"input\", {\n    class: _normalizeClass([\"input-field\", $setup.v$.camera.codec.$error ? 'is-invalid' : '']),\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.camera.codec = $event)\n  }, null, 2 /* CLASS */), [[_vModelText, $data.camera.codec, void 0, {\n    trim: true\n  }]]), $setup.v$.camera.codec.$dirty && $setup.v$.camera.codec.required.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_30, \" Обязательное поле \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_31, [_hoisted_32, _withDirectives(_createElementVNode(\"input\", {\n    class: _normalizeClass([\"input-field\", $setup.v$.camera.login.$error ? 'is-invalid' : '']),\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.camera.login = $event)\n  }, null, 2 /* CLASS */), [[_vModelText, $data.camera.login, void 0, {\n    trim: true\n  }]]), $setup.v$.camera.login.$dirty && $setup.v$.camera.login.required.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_33, \" Обязательное поле \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_34, [_hoisted_35, _withDirectives(_createElementVNode(\"input\", {\n    class: _normalizeClass([\"input-field\", $setup.v$.camera.password.$error ? 'is-invalid' : '']),\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.camera.password = $event)\n  }, null, 2 /* CLASS */), [[_vModelText, $data.camera.password, void 0, {\n    trim: true\n  }]]), $setup.v$.camera.password.$dirty && $setup.v$.camera.password.required.$invalid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_36, \" Обязательное поле \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_37, [_hoisted_38, _withDirectives(_createElementVNode(\"input\", {\n    class: \"input-field\",\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => $data.camera.fullRoute = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.camera.fullRoute, void 0, {\n    trim: true\n  }]])]), _hoisted_39], 32 /* HYDRATE_EVENTS */), _createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    onClick: _cache[10] || (_cache[10] = $event => {\n      _ctx.removeCamera($data.camera.id);\n      $options.resetCamera();\n    }),\n    style: {\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"right\": \"0\",\n      \"margin-right\": \"15px\",\n      \"margin-top\": \"308px\"\n    }\n  }, \" Удалить \"), _hoisted_40, _createElementVNode(\"button\", {\n    style: {\n      \"position\": \"absolute\",\n      \"right\": \"0\",\n      \"margin-right\": \"30px\"\n    },\n    onClick: _cache[11] || (_cache[11] = (...args) => $options.addSectorToCamera && $options.addSectorToCamera(...args))\n  }, \"Добавить\"), _ctx.getSectors.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_41)) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.getSectorsByCameraID(this.camera.id), (cameraSector, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"\",\n      key: index\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      class: \"input-field-sector\",\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => cameraSector.name = $event,\n      placeholder: \"Название\"\n    }, null, 8 /* PROPS */, _hoisted_42), [[_vModelText, cameraSector.name, void 0, {\n      trim: true\n    }]]), _withDirectives(_createElementVNode(\"select\", {\n      \"onUpdate:modelValue\": $event => cameraSector.typeId = $event\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.getSectorTypes, (sectorType, index) => {\n      return _openBlock(), _createElementBlock(\"option\", {\n        value: sectorType.id,\n        key: index\n      }, _toDisplayString(sectorType.name), 9 /* TEXT, PROPS */, _hoisted_44);\n    }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_43), [[_vModelSelect, cameraSector.typeId]]), _createElementVNode(\"button\", {\n      class: \"hidden-button\",\n      onClick: $event => $options.chooseSector(cameraSector),\n      style: {\n        \"margin-left\": \"5px\"\n      }\n    }, [$data.sectorSelected && $data.sector.id === cameraSector.id ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      style: {\n        \"margin-bottom\": \"5px\"\n      },\n      src: require('../assets/icons/eye-opened.png'),\n      alt: \"\"\n    }, null, 8 /* PROPS */, _hoisted_46)) : (_openBlock(), _createElementBlock(\"img\", {\n      key: 1,\n      style: {\n        \"margin-bottom\": \"5px\"\n      },\n      src: require('../assets/icons/eye-closed.png'),\n      alt: \"\"\n    }, null, 8 /* PROPS */, _hoisted_47))], 8 /* PROPS */, _hoisted_45), _createElementVNode(\"button\", {\n      class: \"hidden-button\",\n      onClick: $event => {\n        $options.selectFunction(_ctx.removeSector, cameraSector.id);\n        $options.drawClear();\n      },\n      style: {\n        \"margin-left\": \"10px\"\n      }\n    }, [_createElementVNode(\"img\", {\n      style: {\n        \"margin-bottom\": \"5px\"\n      },\n      src: require('../assets/icons/delete.png'),\n      alt: \"\"\n    }, null, 8 /* PROPS */, _hoisted_49)], 8 /* PROPS */, _hoisted_48)]);\n  }), 128 /* KEYED_FRAGMENT */)), _hoisted_50]), _createElementVNode(\"div\", _hoisted_51, [_createElementVNode(\"div\", _hoisted_52, [_hoisted_53, _createElementVNode(\"div\", _hoisted_54, [_createCommentVNode(\"              :src=\\\"require('')\\\"\"), _createCommentVNode(\"              <img id=\\\"putImage\\\" :src=\\\"require('../' + imgPath)\\\"  style=\\\"width: 100%; height: 100%\\\"  alt=\\\"img1\\\">\"), $data.cameraSelected ? (_openBlock(), _createElementBlock(\"img\", _hoisted_55)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\"              :src=\\\"cameraSelected ? imgPath : require('@/assets/images/background.png') \\\"\"), _createElementVNode(\"img\", {\n    src: require('@/assets/images/background.png'),\n    alt: \"\"\n  }, null, 8 /* PROPS */, _hoisted_56)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createElementVNode(\"canvas\", {\n    onClick: _cache[12] || (_cache[12] = $event => $options.drawLine($event.clientX, $event.clientY)),\n    id: \"canvas\",\n    width: \"300\",\n    height: \"300\",\n    style: {\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"margin-top\": \"40px\",\n      \"margin-left\": \"14px\"\n    }\n  })]), _hoisted_57, _createElementVNode(\"button\", {\n    onClick: _cache[13] || (_cache[13] = (...args) => $options.endDraw && $options.endDraw(...args))\n  }, \"Заполнить область\"), _createElementVNode(\"button\", {\n    onClick: _cache[14] || (_cache[14] = (...args) => $options.removeSectorPoints && $options.removeSectorPoints(...args))\n  }, \"Очистить всё\"), _hoisted_58, _createElementVNode(\"p\", null, \"Сектор \" + _toDisplayString($data.sector.name), 1 /* TEXT */), _hoisted_59, _createElementVNode(\"ul\", null, [_hoisted_60, _hoisted_61, _createElementVNode(\"li\", null, [_createTextVNode(\"Тип сектора: \"), $data.sectorSelected ? (_openBlock(), _createElementBlock(\"span\", _hoisted_62, _toDisplayString(_ctx.getSectorTypeByID($data.sector.typeId).name), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])]), _hoisted_63])])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","style","type","id","src","alt","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","onClick","_cache","args","$options","resetCamera","_hoisted_6","_hoisted_7","_hoisted_8","_Fragment","_renderList","_ctx","getCameras","camera","index","$event","chooseCamera","key","_hoisted_10","_toDisplayString","name","_hoisted_11","ip","_hoisted_12","_hoisted_13","onSubmit","_withModifiers","save","_hoisted_14","_hoisted_15","_normalizeClass","$setup","v$","$error","$data","$dirty","required","$invalid","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","port","_hoisted_22","integer","_hoisted_23","_hoisted_24","_hoisted_25","chanel","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","codec","_hoisted_30","_hoisted_31","_hoisted_32","login","_hoisted_33","_hoisted_34","_hoisted_35","password","_hoisted_36","_hoisted_37","_hoisted_38","fullRoute","_hoisted_39","removeCamera","_hoisted_40","addSectorToCamera","getSectors","length","_hoisted_41","getSectorsByCameraID","cameraSector","placeholder","typeId","getSectorTypes","sectorType","value","_hoisted_44","chooseSector","sectorSelected","sector","require","selectFunction","removeSector","drawClear","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_createCommentVNode","cameraSelected","_hoisted_55","drawLine","clientX","clientY","width","height","_hoisted_57","endDraw","removeSectorPoints","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","getSectorTypeByID","_hoisted_63"],"sources":["D:\\GitHub\\SportSpot\\UserFrontend\\sport-spot-project\\src\\components\\CamerasPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container\" >\r\n      <div class=\"row justify-content-around\">\r\n        <div class=\"col-3\">\r\n            <div class=\"row\">\r\n              <label class=\"field\">Камеры</label>\r\n              <button class=\"add\" style=\"margin-top: 5px\" @click=\"resetCamera\">Добавить</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n          <label class=\"field\">Настройка</label>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <label class=\"field\">Просмотр</label>\r\n        </div>\r\n        <div class=\"col-3\" >\r\n          <div class=\"row window camera col-12\" @click=\"chooseCamera(camera)\" v-for=\"(camera, index) in getCameras\"\r\n               :key=\"index\">\r\n              <span class=\"cam-name\">{{camera.name}}</span>\r\n              <span class=\"cam-ip\">{{camera.ip}}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-4 window\">\r\n          <label style=\"font-weight: 700; margin-top: 10px\">Изображение</label>\r\n          <form @submit.prevent=\"save\" style=\"margin-top: 10px\">\r\n            <div class=\"\">\r\n              <label> Название: </label>\r\n              <input class=\" input-field\" type=\"text\" v-model.trim=\"camera.name\"\r\n                     :class=\"v$.camera.name.$error ? 'is-invalid' : ''\" >\r\n              <p v-if=\"v$.camera.name.$dirty && v$.camera.name.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> ip: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.ip\"\r\n                     :class=\"v$.camera.ip.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.ip.$dirty && v$.camera.ip.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Порт: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.port\"\r\n                     :class=\"v$.camera.port.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.port.$dirty && v$.camera.port.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n              <p v-if=\"v$.camera.port.$dirty && v$.camera.port.integer.$invalid \" class=\"invalid-feedback\">\r\n                Значение должно быть числовым\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Канал: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.chanel\"\r\n                     :class=\"v$.camera.chanel.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.integer.$invalid \" class=\"invalid-feedback\">\r\n                Значение должно быть числовым\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Кодек: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.codec\"\r\n                     :class=\"v$.camera.codec.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.codec.$dirty && v$.camera.codec.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Логин: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.login\"\r\n                     :class=\"v$.camera.login.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.login.$dirty && v$.camera.login.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Пароль: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.password\"\r\n                     :class=\"v$.camera.password.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.password.$dirty && v$.camera.password.required.$invalid \" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Полный путь: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.fullRoute\">\r\n            </div>\r\n            <div style=\"width: 50px; margin-bottom: 10px\">\r\n                <button type=\"submit\" class=\"btn btn-success\" >Сохранить</button>\r\n              </div>\r\n          </form>\r\n          <button\r\n              class=\"btn btn-primary\"\r\n              @click=\"removeCamera(camera.id); resetCamera()\"\r\n              style=\"position: absolute; top: 0; right: 0; margin-right: 15px; margin-top: 308px\">\r\n            Удалить\r\n          </button>\r\n          <label style=\"font-weight: 700\">Сектора</label>\r\n\r\n          <button style=\"position: absolute; right: 0; margin-right: 30px\" @click=\"addSectorToCamera\">Добавить</button>\r\n          <div v-if=\"getSectors.length === 0\" id=\"preloaded\" class=\"hidden\"></div>\r\n          <div class=\"\" v-for=\"(cameraSector, index) in getSectorsByCameraID(this.camera.id)\" :key=\"index\">\r\n            <input class=\"input-field-sector\" type=\"text\" v-model.trim=\"cameraSector.name\" placeholder=\"Название\">\r\n            <select v-model=\"cameraSector.typeId\">\r\n              <option v-for=\"(sectorType, index) in getSectorTypes\" :value=\"sectorType.id\" :key=\"index\">\r\n                {{sectorType.name}}\r\n              </option>\r\n            </select>\r\n            <button class=\"hidden-button\" @click=\"chooseSector(cameraSector)\" style=\"margin-left: 5px\">\r\n              <img v-if=\"sectorSelected && sector.id === cameraSector.id\" style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/eye-opened.png')\" alt=\"\">\r\n              <img v-else style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/eye-closed.png')\" alt=\"\">\r\n            </button>\r\n            <button class=\"hidden-button\" @click=\"selectFunction(removeSector,cameraSector.id); drawClear()\" style=\"margin-left: 10px\">\r\n              <img style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/delete.png')\" alt=\"\">\r\n            </button>\r\n          </div>\r\n          <br>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <div class=\"col-12 window\">\r\n            <p>Изображение</p>\r\n            <div style=\"width: 300px; height: 300px\">\r\n<!--              :src=\"require('')\"-->\r\n<!--              <img id=\"putImage\" :src=\"require('../' + imgPath)\"  style=\"width: 100%; height: 100%\"  alt=\"img1\">-->\r\n              <img v-if=\"cameraSelected\" id=\"camImg\" src=\"\" style=\"width: 100%; height: 100%\" alt=\"\">\r\n<!--              :src=\"cameraSelected ? imgPath : require('@/assets/images/background.png') \"-->\r\n              <img v-else :src=\"require('@/assets/images/background.png')\" alt=\"\">\r\n              <canvas\r\n                  @click=\"drawLine($event.clientX, $event.clientY)\"\r\n                  id=\"canvas\"\r\n                  width=\"300\" height=\"300\"\r\n                  style=\"position: absolute; top: 0; left: 0; margin-top: 40px; margin-left: 14px\"\r\n              >\r\n              </canvas>\r\n            </div>\r\n\r\n            <br>\r\n            <button @click=\"endDraw\">Заполнить область</button>\r\n            <button @click=\"removeSectorPoints\">Очистить всё</button>\r\n            <p>Информация сектора</p>\r\n            <p>Сектор {{sector.name}}</p>\r\n            <span>Техническая информация:</span>\r\n            <ul>\r\n              <li>Границы:</li>\r\n              <li>Высота от пола:</li>\r\n              <li>Тип сектора: <span v-if=\"sectorSelected\">{{getSectorTypeByID(sector.typeId).name}}</span></li>\r\n            </ul>\r\n            <p>Справка:</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from 'vuex'\r\nimport {mapActions} from 'vuex'\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, integer} from '@vuelidate/validators'\r\n\r\nexport default {\r\n  name: \"CamerasPage\",\r\n  setup () {\r\n    return {\r\n      v$: useVuelidate()\r\n    }\r\n  },\r\n  data(){\r\n    return {\r\n      ctx: null,\r\n      drawClicks: 0,\r\n      imgPath: '',\r\n      camera: {\r\n        id : null,\r\n        roomID: null,\r\n        name: '',\r\n        ip: '',\r\n        port: '',\r\n        chanel : '',\r\n        codec : '',\r\n        login : '',\r\n        password : '',\r\n        fullRoute: '',\r\n      },\r\n      sector: {\r\n        camId: null,\r\n        id: null,\r\n        name: '',\r\n        points: [],\r\n        roomId: null,\r\n        typeId: null,\r\n      },\r\n      cameraSelected: false,\r\n      sectorSelected: false\r\n    }\r\n  },\r\n  validations: {\r\n    camera: {\r\n      name: {required},\r\n      ip: {required},\r\n      port: {required, integer},\r\n      chanel: {required, integer},\r\n      codec: {required},\r\n      login: { required },\r\n      password: {required},\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n        'getCameras',\r\n        'getCameraByID',\r\n        'getSectorTypes',\r\n        'getSectorsByCameraID',\r\n        'getSectors',\r\n        'getSectorByID',\r\n        'getSectorTypeByID'\r\n    ])\r\n  },\r\n  mounted() {\r\n    if (this.getCameras.length === 0){\r\n      this.selectFunction(this.getCamerasFromDB)\r\n    }\r\n    if (this.getSectorTypes.length === 0){\r\n      this.selectFunction(this.getSectorTypesFromDB)\r\n    }\r\n    this.draw()\r\n  },\r\n  methods: {\r\n    getSectorTypesFromDB() {\r\n      let returnResult\r\n      fetch(`http://localhost:5000/getSectorTypes`, {\r\n        credentials: \"include\",\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            returnResult = response\r\n            console.log('sectorTypes ')\r\n            this.$store.state.sectorTypes = response\r\n            console.log(this.$store.state.sectorTypes)\r\n          });\r\n      return returnResult\r\n    },\r\n    getSectorsByCameraIDFromDB() {\r\n      let returnResult\r\n      fetch(`http://localhost:5000/getSectorsByCameraID?id=${this.camera.id}`, {\r\n        credentials: \"include\",\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            returnResult = response\r\n            console.log('preload')\r\n            // let preloaderEl = document.getElementById('preloaded')\r\n            // preloaderEl.classList.add('hidden');\r\n            console.log('sectors ')\r\n            console.log(response[0])\r\n            this.$store.state.sectors = response\r\n            console.log(this.$store.state.sectors)\r\n          });\r\n      return returnResult\r\n    },\r\n    getCamerasFromDB() {\r\n      let returnResult\r\n      fetch('http://localhost:5000/getCameras', {\r\n        credentials: \"include\",\r\n        // fetch('http://localhost:5000/testJWT', {\r\n        method: 'GET',\r\n        // credentials: \"include\",\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n          // 'Access-Control-Allow-Origin': 'http://192.168.169.32:5000',\r\n          // 'Access-Control-Allow-Credentials': 'true',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            returnResult = response\r\n            console.log(response)\r\n            this.$store.state.cameras = response\r\n          });\r\n      return  returnResult\r\n    },\r\n    setSector(sector){\r\n      console.log('sector ' + sector)\r\n      return fetch('http://localhost:5000/setSector', {\r\n        credentials: \"include\",\r\n        method: 'POST',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"camId\": sector.camId,\r\n          \"id\": sector.id,\r\n          \"name\": sector.name,\r\n          \"points\": sector.points,\r\n          \"roomId\": sector.roomId,\r\n          \"typeId\": sector.typeId\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) =>{\r\n            console.log(response)\r\n            sector.id = response.id\r\n            // sector.id === null ? console.log('nulz') : console.log('nenulz')\r\n            if (sector.id === null) return response\r\n            else return sector\r\n          })\r\n      // console.log('\\nsectorDDDD ' + returnResult)\r\n    },\r\n    setCamera() {\r\n      return fetch('http://localhost:5000/setCamera', {\r\n        credentials: \"include\",\r\n        method: 'POST',\r\n        // cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"chanel\": this.camera.chanel,\r\n          \"codec\": this.camera.codec,\r\n          \"id\": this.camera.id,\r\n          \"ip\": this.camera.ip,\r\n          \"port\": this.camera.port,\r\n          \"login\": this.camera.login,\r\n          \"name\": this.camera.name,\r\n          \"password\": this.camera.password,\r\n          \"fullRoute\": this.camera.fullRoute\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log(response)\r\n            this.camera.id = response.id\r\n            let cameraCopy = Object.assign({}, this.camera)\r\n            console.log('check')\r\n            if (this.getCameraByID(cameraCopy.id) === undefined) {\r\n              this.addCamera(cameraCopy)\r\n              console.log('yesCheck')\r\n            }\r\n            console.log('noCheck')\r\n            this.getSectors.forEach((sector) => {\r\n              sector.camId = this.camera.id\r\n              this.selectFunction(this.setSector, sector)\r\n            })\r\n            return response\r\n          });\r\n    },\r\n    save() {\r\n      this.v$.camera.$touch()\r\n      if (!this.v$.camera.$error) {\r\n        console.log('Валидация прошла успешно')\r\n        this.selectFunction(this.setCamera)\r\n      }\r\n      else console.log('Валидация не прошла')\r\n    },\r\n    endDraw() {\r\n      this.ctx.lineTo(this.sector.points[0][0], this.sector.points[0][1])\r\n      this.ctx.stroke()\r\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\"\r\n      this.ctx.fill()\r\n      this.drawClicks = 0\r\n    },\r\n    drawLine(x, y){\r\n      if (this.sectorSelected){\r\n        let targetCoords = document.getElementById('canvas').getBoundingClientRect()\r\n        let newX = x - targetCoords.left\r\n        let newY = y - targetCoords.top\r\n        console.log(`x: ${x} y: ${y} newX: ${newX} newY: ${newY} left: ${targetCoords.left} right: ${targetCoords.top}`)\r\n        if (this.drawClicks === 0) {\r\n          this.ctx.moveTo(newX, newY)\r\n        }\r\n        else this.ctx.lineTo(newX, newY)\r\n        this.sector.points.push([newX, newY])\r\n        this.ctx.arc(newX, newY, 2, 0, Math.PI * 2)\r\n        this.ctx.strokeStyle = \"rgba(255, 230, 0)\"\r\n        this.ctx.lineWidth = 2\r\n        this.ctx.stroke()\r\n        this.drawClicks ++\r\n      }\r\n      else alert(\"Выберите сектор\")\r\n    },\r\n    draw() {\r\n      let canvas = document.getElementById('canvas')\r\n      if (canvas.getContext) {\r\n        console.log('getContext')\r\n        this.ctx = canvas.getContext(\"2d\")\r\n        this.ctx.beginPath()\r\n      }\r\n    },\r\n    removeSectorPoints(){\r\n      this.ctx.clearRect(0, 0, 300, 300)\r\n      this.sector.points = []\r\n      this.ctx.beginPath()\r\n    },\r\n    drawClear() {\r\n      this.ctx.clearRect(0, 0, 300, 300)\r\n      this.ctx.beginPath()\r\n    },\r\n    drawSectorPoints() {\r\n      console.log('drawSectorPoints')\r\n      let points = this.sector.points\r\n      this.ctx.moveTo(points[0][0], points[0][1])\r\n      this.ctx.arc(points[0][0], points[0][1], 2, 0, Math.PI * 2)\r\n      for (let i = 1; i < points.length; i++){\r\n        this.ctx.lineTo(points[i][0], points[i][1])\r\n        this.ctx.arc(points[i][0], points[i][1], 2, 0, Math.PI * 2)\r\n      }\r\n      this.ctx.lineTo(points[0][0], points[0][1])\r\n      this.ctx.strokeStyle = \"rgba(255, 230, 0)\"\r\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\"\r\n      this.ctx.lineWidth = 2\r\n      this.ctx.stroke()\r\n      this.ctx.fill()\r\n      //\r\n    },\r\n    drawImage() {\r\n      console.log('drawImage')\r\n      let img = new Image()\r\n      img.onload = function (){\r\n        document.getElementById(\"camImg\").setAttribute(\"src\", img.src)\r\n      }\r\n      img.src = 'http://localhost:5000/getVideo?camId=' + this.camera.id\r\n      let refreshInterval = setInterval(() => this.refreshCamera(refreshInterval), 5000)\r\n      // img\r\n      // console.log(img)\r\n      // this.ctx.drawImage(img, 0, 0, 779, 584, 0, 0, 300, 300)\r\n    },\r\n    refreshCamera(refreshInterval){\r\n        console.log('check ' + this.cameraSelected)\r\n        if (this.cameraSelected === false){\r\n          console.log('!cameraSelected')\r\n          clearInterval(refreshInterval)\r\n        }\r\n        else{\r\n          console.log('refresh')\r\n          this.selectFunction(this.refreshVideo)\r\n        }\r\n    },\r\n    refreshVideo() {\r\n      let returnResult\r\n      fetch(`http://localhost:5000/refreshVideo?camId=${this.camera.id}`, {\r\n        credentials: \"include\",\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            returnResult = response\r\n            console.log(response)\r\n          });\r\n      return returnResult\r\n    },\r\n    chooseCamera(camera) {\r\n      console.log(camera.id)\r\n      this.camera = this.getCameraByID(camera.id)\r\n      this.selectFunction(this.getSectorsByCameraIDFromDB)\r\n      this.cameraSelected = true\r\n      this.drawImage()\r\n      this.resetSector()\r\n    },\r\n    chooseSector(sector) {\r\n      if (this.sector.id === sector.id && sector.id !== null) {\r\n        console.log(this.sector.id + ' ' + sector.id + ' resetSec')\r\n        this.resetSector()\r\n      }\r\n      else if (sector.name === '' || sector.typeId === null) alert(\"Сначала введите название сектора и выберите его тип\")\r\n      else if (sector.id === null) {\r\n        let p1 = this.selectFunction(this.setSector, sector)\r\n        p1.then(value => {\r\n          console.log(value.id)\r\n          this.showSector(value)\r\n        })\r\n      }\r\n      else this.showSector(sector)\r\n    },\r\n    showSector(sector) {\r\n      if (sector.id !== null) {\r\n        this.sector = this.getSectorByID(sector.id)\r\n        this.sectorSelected = true\r\n        this.drawClear()\r\n        if (this.sector.points.length !== 0) {\r\n          this.drawSectorPoints()\r\n        }\r\n      }\r\n    },\r\n    resetCamera(){\r\n      // document.getElementById(\"camImg\").setAttribute(\"src\", '@/assets/images/background.png')\r\n      console.log('reset')\r\n      this.$store.state.sectors = []\r\n      let cameraCopy = Object.assign({}, this.camera)\r\n      this.camera = cameraCopy\r\n      this.camera.id = null\r\n      this.camera.roomID = null\r\n      this.camera.name = ''\r\n      this.camera.ip = ''\r\n      this.camera.codec = ''\r\n      this.camera.port = ''\r\n      this.camera.chanel = ''\r\n      this.camera.login = ''\r\n      this.camera.password = ''\r\n      this.camera.fullRoute = ''\r\n      this.cameraSelected = false\r\n      this.v$.camera.$reset()\r\n      this.resetSector()\r\n      this.drawClear()\r\n    },\r\n    resetSector() {\r\n      this.drawClear()\r\n      let sectorCopy = Object.assign({}, this.sector)\r\n      this.sector = sectorCopy\r\n      this.sector.camId = null\r\n      this.sector.id = null\r\n      this.sector.name = ''\r\n      this.sector.points = []\r\n      this.sector.roomId = null\r\n      this.sector.typeId = null\r\n      this.sectorSelected = false\r\n    },\r\n    addSectorToCamera() {\r\n      console.log('p')\r\n      this.resetSector()\r\n      this.sector.camId = this.camera.id\r\n      this.$store.commit('setSector', Object.assign({}, this.sector))\r\n    },\r\n    selectFunction(func, value){\r\n      let respFunc\r\n      if (arguments.length === 2) respFunc = func(value)\r\n      else respFunc = func()\r\n      let refresh\r\n      console.log('respFunc ' + respFunc)\r\n      if (respFunc === \"Bad token\") {\r\n        refresh = this.refreshToken()\r\n        if (refresh === \"ok\"){\r\n          console.log('refreshOk')\r\n          respFunc = func()\r\n        }\r\n        if (respFunc === \"Bad token\") alert('logout pls')\r\n      }\r\n      else return respFunc\r\n    },\r\n    ...mapActions([\r\n        'addCamera',\r\n        'removeCamera',\r\n        'removeSector',\r\n        'refreshToken'\r\n    ])\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ncanvas {\r\n  border: 1px solid black;\r\n  background: none;\r\n}\r\n#preloaded {\r\n  position: inherit;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 999;\r\n  width: 100%;\r\n  height: 30%;\r\n  overflow: visible;\r\n  background: #fbfbfb url('//cdnjs.cloudflare.com/ajax/libs/file-uploader/3.7.0/processing.gif') no-repeat center center;\r\n}\r\n.hidden{\r\n  visibility: hidden;\r\n  opacity: 0;\r\n}\r\n.visible{\r\n  visibility: visible;\r\n  opacity: 1;\r\n}\r\n.window{\r\n  box-shadow: 0 3px 4px rgba(0,0,0,.25);\r\n  border-radius: 10px ;\r\n}\r\n.input-field{\r\n  outline: none;\r\n  width: 200px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.input-field-sector{\r\n  outline: none;\r\n  width: 150px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.camera:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n.cam-name{\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  margin: 7px;\r\n}\r\n.cam-ip{\r\n  font-size: 12px;\r\n  font-weight: 300;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 30px;\r\n  margin-top: 10px;\r\n}\r\n.add{\r\n  width: 110px;\r\n  /*height: 35px;*/\r\n  position: absolute;\r\n  right: 0;\r\n  /*top: 0;*/\r\n  margin-right: 30px;\r\n  border-radius: 10px;\r\n  font-size: 18px;\r\n}\r\n.add:hover{\r\n  background-color: #dadada;\r\n}\r\n.field {\r\n  font-size: 22px;\r\n  font-weight: 700;\r\n}\r\n.hidden-button{\r\n  background: inherit;\r\n  border: none;\r\n  width: 25px;\r\n  /*vertical-align: center;*/\r\n}\r\n.hidden-button:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}