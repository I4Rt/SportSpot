{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport { mapActions } from 'vuex';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, integer } from '@vuelidate/validators';\nexport default {\n  name: \"CamerasPage\",\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      ctx: null,\n      camera: {\n        id: null,\n        roomID: null,\n        name: '',\n        ip: '',\n        chanel: '',\n        codec: '',\n        login: '',\n        password: ''\n      },\n      sector: {\n        camId: null,\n        id: null,\n        name: '',\n        points: [],\n        roomId: null,\n        typeId: null\n      },\n      cameraSelected: false,\n      sectorSelected: false\n    };\n  },\n  validations: {\n    camera: {\n      name: {\n        required\n      },\n      ip: {\n        required\n      },\n      chanel: {\n        required,\n        integer\n      },\n      codec: {\n        required\n      },\n      login: {\n        required\n      },\n      password: {\n        required\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['getCameras', 'getCameraByID', 'getSectorTypes', 'getSectorsByCameraID', 'getSectors', 'getSectorByID', 'getSectorTypeByID'])\n  },\n  mounted() {\n    if (this.getCameras.length === 0) {\n      this.getCamerasFromDB();\n    }\n    if (this.getSectorTypes.length === 0) {\n      this.getSectorTypesFromDB();\n    }\n    this.draw();\n  },\n  methods: {\n    getSectorTypesFromDB() {\n      fetch(`http://localhost:5000/getSectorTypes`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        console.log('sectorTypes ');\n        this.$store.state.sectorTypes = response;\n        console.log(this.$store.state.sectorTypes);\n      });\n    },\n    getSectorsByCameraIDFromDB() {\n      fetch(`http://localhost:5000/getSectorsByCameraID?id=${this.camera.id}`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        console.log('sectors ');\n        console.log(response[0]);\n        this.$store.state.sectors = response;\n        console.log(this.$store.state.sectors);\n      });\n    },\n    getCamerasFromDB() {\n      fetch('http://localhost:5000/getCameras', {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.$store.state.cameras = response;\n      });\n    },\n    setSector(sector) {\n      console.log('sector ' + sector);\n      fetch('http://localhost:5000/setSector', {\n        method: 'POST',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          \"camId\": sector.camId,\n          \"id\": sector.id,\n          \"name\": sector.name,\n          \"points\": sector.points,\n          \"roomId\": sector.roomId,\n          \"typeId\": sector.typeId\n        })\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        sector.id = response.id;\n      });\n    },\n    setCamera() {\n      fetch('http://localhost:5000/setCamera', {\n        method: 'POST',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          \"chanel\": this.camera.chanel,\n          \"codec\": this.camera.codec,\n          \"id\": this.camera.id,\n          \"ip\": this.camera.ip,\n          \"login\": this.camera.login,\n          \"name\": this.camera.name,\n          \"password\": this.camera.password\n        })\n      }).then(response => response.json()).then(response => {\n        this.camera.id = response.id;\n        let cameraCopy = Object.assign({}, this.camera);\n        console.log('check');\n        if (this.getCameraByID(cameraCopy.id) === undefined) {\n          this.addCamera(cameraCopy);\n          console.log('yesCheck');\n        }\n        console.log('noCheck');\n        this.getSectors.forEach(sector => {\n          sector.camId = this.camera.id;\n          if (sector.id === null) {\n            this.setSector(sector);\n          }\n        });\n      });\n    },\n    save() {\n      this.v$.camera.$touch();\n      if (!this.v$.camera.$error) {\n        console.log('Валидация прошла успешно');\n        this.setCamera();\n      } else console.log('Валидация не прошла');\n    },\n    enterDraw() {\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, 0);\n    },\n    drawLine(x, y) {\n      console.log('print');\n      let canvas = document.getElementById('canvas');\n      let targetCoords = canvas.getBoundingClientRect();\n      let newX = x - canvas.offsetLeft;\n      let newY = y - canvas.offsetTop;\n      console.log(`x: ${x} y: ${y} newX: ${newX} newY: ${newY} left: ${canvas.offsetLeft} right: ${canvas.offsetTop}`);\n      this.ctx.lineTo(newX, newY);\n      // this.ctx.fillRect(x, y, 5, 5)\n    },\n\n    leaveDraw() {\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.5)\";\n      this.ctx.fill();\n    },\n    draw() {\n      let canvas = document.getElementById('canvas');\n      if (canvas.getContext) {\n        this.ctx = canvas.getContext(\"2d\");\n        // this.ctx.strokeRect(0, 0, 150, 150)\n      }\n    },\n\n    getCoordinates(x, y) {\n      console.log(`x: ${x}, y: ${y}`);\n    },\n    chooseCamera(camera) {\n      console.log(camera.id);\n      this.camera = this.getCameraByID(camera.id);\n      this.getSectorsByCameraIDFromDB();\n      this.cameraSelected = true;\n      this.resetSector();\n    },\n    chooseSector(sector) {\n      console.log(sector.id);\n      this.sector = this.getSectorByID(sector.id);\n      this.sectorSelected = true;\n    },\n    resetCamera() {\n      console.log('reset');\n      this.$store.state.sectors = [];\n      let cameraCopy = Object.assign({}, this.camera);\n      this.camera = cameraCopy;\n      this.camera.id = null;\n      this.camera.roomID = null;\n      this.camera.name = '';\n      this.camera.ip = '';\n      this.camera.codec = '';\n      this.camera.chanel = '';\n      this.camera.login = '';\n      this.camera.password = '';\n      this.cameraSelected = false;\n      this.v$.camera.$reset();\n      this.resetSector();\n    },\n    resetSector() {\n      this.sector.camId = null;\n      this.sector.id = null;\n      this.sector.name = '';\n      this.sector.points = [];\n      this.sector.roomId = null;\n      this.sector.typeId = null;\n      this.sectorSelected = false;\n    },\n    addSectorToCamera() {\n      console.log('p');\n      this.sector.camId = this.camera.id;\n      this.$store.commit('setSector', Object.assign({}, this.sector));\n    },\n    ...mapActions(['addCamera', 'removeCamera', 'removeSector'])\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","useVuelidate","required","integer","name","setup","v$","data","ctx","camera","id","roomID","ip","chanel","codec","login","password","sector","camId","points","roomId","typeId","cameraSelected","sectorSelected","validations","computed","mounted","getCameras","length","getCamerasFromDB","getSectorTypes","getSectorTypesFromDB","draw","methods","fetch","method","cors","headers","then","response","json","console","log","$store","state","sectorTypes","getSectorsByCameraIDFromDB","sectors","cameras","setSector","body","JSON","stringify","setCamera","cameraCopy","Object","assign","getCameraByID","undefined","addCamera","getSectors","forEach","save","$touch","$error","enterDraw","beginPath","moveTo","drawLine","x","y","canvas","document","getElementById","targetCoords","getBoundingClientRect","newX","offsetLeft","newY","offsetTop","lineTo","leaveDraw","fillStyle","fill","getContext","getCoordinates","chooseCamera","resetSector","chooseSector","getSectorByID","resetCamera","$reset","addSectorToCamera","commit"],"sources":["D:\\GitHub\\SportSpot\\UserFrontend\\sport-spot-project\\src\\components\\CamerasPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container\" >\r\n      <div class=\"row justify-content-around\">\r\n        <div class=\"col-3\">\r\n            <div class=\"row\">\r\n              <label class=\"field\">Камеры</label>\r\n              <button class=\"add\" style=\"margin-top: 5px\" @click=\"resetCamera\">Добавить</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n          <label class=\"field\">Настройка</label>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <label class=\"field\">Просмотр</label>\r\n        </div>\r\n        <div class=\"col-3\" >\r\n          <div class=\"row window camera col-12\" @click=\"chooseCamera(camera)\" v-for=\"(camera, index) in getCameras\"\r\n               :key=\"index\">\r\n              <span class=\"cam-name\">{{camera.name}}</span>\r\n              <span class=\"cam-ip\">{{camera.ip}}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-4 window\">\r\n          <label style=\"font-weight: 700; margin-top: 10px\">Изображение</label>\r\n          <form @submit.prevent=\"save\" style=\"margin-top: 10px\">\r\n            <div class=\"\">\r\n              <label> Название: </label>\r\n              <input class=\" input-field\" type=\"text\" v-model.trim=\"camera.name\"\r\n                     :class=\"v$.camera.name.$error ? 'is-invalid' : ''\" >\r\n              <p v-if=\"v$.camera.name.$dirty && v$.camera.name.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> ip: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.ip\"\r\n                     :class=\"v$.camera.ip.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.ip.$dirty && v$.camera.ip.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Канал: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.chanel\"\r\n                     :class=\"v$.camera.chanel.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.integer.$invalid \" class=\"invalid-feedback\">\r\n                Канал должен быть числом\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Кодек: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.codec\"\r\n                     :class=\"v$.camera.codec.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.codec.$dirty && v$.camera.codec.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Логин: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.login\"\r\n                     :class=\"v$.camera.login.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.login.$dirty && v$.camera.login.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Пароль: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.password\"\r\n                     :class=\"v$.camera.password.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.password.$dirty && v$.camera.password.required.$invalid \" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div style=\"width: 50px; margin-bottom: 10px\">\r\n                <button type=\"submit\" class=\"btn btn-success\" >Сохранить</button>\r\n              </div>\r\n          </form>\r\n          <button\r\n              class=\"btn btn-primary\"\r\n              @click=\"removeCamera(camera.id); resetCamera()\"\r\n              style=\"position: absolute; top: 0; right: 0; margin-right: 15px; margin-top: 244px\">\r\n            Удалить\r\n          </button>\r\n          <label style=\"font-weight: 700\">Сектора</label>\r\n\r\n          <button style=\"position: absolute; right: 0; margin-right: 30px\" @click=\"addSectorToCamera\">Добавить</button>\r\n          <div class=\"\" v-for=\"(cameraSector, index) in getSectorsByCameraID(this.camera.id)\" :key=\"index\">\r\n            <input class=\"input-field-sector\" type=\"text\" v-model.trim=\"cameraSector.name\" placeholder=\"Название\">\r\n            <select v-model=\"cameraSector.typeId\">\r\n              <option v-for=\"(sectorType, index) in getSectorTypes\" :value=\"sectorType.id\" :key=\"index\">\r\n                {{sectorType.name}}\r\n              </option>\r\n            </select>\r\n            <button class=\"hidden-button\" @click=\"removeSector(cameraSector.id)\" style=\"margin-left: 10px\">\r\n              <img style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/delete.png')\" alt=\"\">\r\n            </button>\r\n            <button class=\"hidden-button\" @click=\"chooseSector(cameraSector)\" style=\"margin-left: 5px\">\r\n              <img v-if=\"sectorSelected\" style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/eye-opened.png')\" alt=\"\">\r\n              <img v-else style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/eye-closed.png')\" alt=\"\">\r\n            </button>\r\n          </div>\r\n          <br>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <div class=\"col-12 window\">\r\n            <p>Изображение</p>\r\n<!--            <img src=\"http://localhost:5000/videoStream\" style=\"width: 100%\">-->\r\n<!--            <img :src=\"require('../assets/images/img1.png')\" style=\"width: 100%\" alt=\"img1\">-->\r\n            <canvas\r\n                @mouseenter=\"enterDraw\"\r\n                @mouseleave=\"leaveDraw\"\r\n                @click=\"drawLine($event.pageX, $event.pageY)\"\r\n                id=\"canvas\"\r\n                width=\"150\" height=\"150\">\r\n            </canvas>\r\n            <p>Информация сектора</p>\r\n            <p>Сектор {{sector.name}}</p>\r\n            <span>Техническая информация:</span>\r\n            <ul>\r\n              <li>Границы:</li>\r\n              <li>Высота от пола:</li>\r\n              <li>Тип сектора: <span v-if=\"sectorSelected\">{{getSectorTypeByID(sector.typeId).name}}</span></li>\r\n            </ul>\r\n            <p>Справка:</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from 'vuex'\r\nimport {mapActions} from 'vuex'\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, integer} from '@vuelidate/validators'\r\n\r\nexport default {\r\n  name: \"CamerasPage\",\r\n  setup () {\r\n    return {\r\n      v$: useVuelidate()\r\n    }\r\n  },\r\n  data(){\r\n    return {\r\n      ctx: null,\r\n      camera: {\r\n        id : null,\r\n        roomID: null,\r\n        name: '',\r\n        ip: '',\r\n        chanel : '',\r\n        codec : '',\r\n        login : '',\r\n        password : '',\r\n      },\r\n      sector: {\r\n        camId: null,\r\n        id: null,\r\n        name: '',\r\n        points: [],\r\n        roomId: null,\r\n        typeId: null,\r\n      },\r\n      cameraSelected: false,\r\n      sectorSelected: false\r\n    }\r\n  },\r\n  validations: {\r\n    camera: {\r\n      name: {required},\r\n      ip: {required},\r\n      chanel: {required, integer},\r\n      codec: {required},\r\n      login: { required },\r\n      password: {required},\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n        'getCameras',\r\n        'getCameraByID',\r\n        'getSectorTypes',\r\n        'getSectorsByCameraID',\r\n        'getSectors',\r\n        'getSectorByID',\r\n        'getSectorTypeByID'\r\n    ])\r\n  },\r\n  mounted() {\r\n    if (this.getCameras.length === 0){\r\n      this.getCamerasFromDB()\r\n    }\r\n    if (this.getSectorTypes.length === 0){\r\n      this.getSectorTypesFromDB()\r\n    }\r\n    this.draw()\r\n  },\r\n  methods: {\r\n    getSectorTypesFromDB() {\r\n      fetch(`http://localhost:5000/getSectorTypes`, {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log('sectorTypes ')\r\n            this.$store.state.sectorTypes = response\r\n            console.log(this.$store.state.sectorTypes)\r\n          });\r\n    },\r\n    getSectorsByCameraIDFromDB() {\r\n      fetch(`http://localhost:5000/getSectorsByCameraID?id=${this.camera.id}`, {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log('sectors ')\r\n            console.log(response[0])\r\n            this.$store.state.sectors = response\r\n            console.log(this.$store.state.sectors)\r\n          });\r\n    },\r\n    getCamerasFromDB() {\r\n      fetch('http://localhost:5000/getCameras', {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log(response)\r\n            this.$store.state.cameras = response\r\n          });\r\n    },\r\n    setSector(sector){\r\n      console.log('sector ' + sector)\r\n      fetch('http://localhost:5000/setSector', {\r\n        method: 'POST',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"camId\": sector.camId,\r\n          \"id\": sector.id,\r\n          \"name\": sector.name,\r\n          \"points\": sector.points,\r\n          \"roomId\": sector.roomId,\r\n          \"typeId\": sector.typeId\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) =>{\r\n            console.log(response)\r\n            sector.id = response.id\r\n          })\r\n    },\r\n    setCamera() {\r\n      fetch('http://localhost:5000/setCamera', {\r\n        method: 'POST',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"chanel\": this.camera.chanel,\r\n          \"codec\": this.camera.codec,\r\n          \"id\": this.camera.id,\r\n          \"ip\": this.camera.ip,\r\n          \"login\": this.camera.login,\r\n          \"name\": this.camera.name,\r\n          \"password\": this.camera.password\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            this.camera.id = response.id\r\n            let cameraCopy = Object.assign({}, this.camera)\r\n            console.log('check')\r\n            if (this.getCameraByID(cameraCopy.id) === undefined) {\r\n              this.addCamera(cameraCopy)\r\n              console.log('yesCheck')\r\n            }\r\n            console.log('noCheck')\r\n            this.getSectors.forEach((sector) => {\r\n              sector.camId = this.camera.id\r\n              if (sector.id === null){\r\n                this.setSector(sector)\r\n              }\r\n            })\r\n          });\r\n    },\r\n    save() {\r\n      this.v$.camera.$touch()\r\n      if (!this.v$.camera.$error) {\r\n        console.log('Валидация прошла успешно')\r\n        this.setCamera()\r\n      }\r\n      else console.log('Валидация не прошла')\r\n    },\r\n    enterDraw() {\r\n      this.ctx.beginPath()\r\n      this.ctx.moveTo(0,0)\r\n    },\r\n    drawLine(x, y){\r\n      console.log('print')\r\n      let canvas = document.getElementById('canvas')\r\n      let targetCoords = canvas.getBoundingClientRect()\r\n      let newX = x - canvas.offsetLeft\r\n      let newY = y - canvas.offsetTop\r\n      console.log(`x: ${x} y: ${y} newX: ${newX} newY: ${newY} left: ${canvas.offsetLeft} right: ${canvas.offsetTop}`)\r\n      this.ctx.lineTo(newX, newY)\r\n      // this.ctx.fillRect(x, y, 5, 5)\r\n    },\r\n    leaveDraw() {\r\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.5)\"\r\n      this.ctx.fill()\r\n    },\r\n    draw() {\r\n      let canvas = document.getElementById('canvas')\r\n      if (canvas.getContext) {\r\n        this.ctx = canvas.getContext(\"2d\")\r\n        // this.ctx.strokeRect(0, 0, 150, 150)\r\n      }\r\n    },\r\n    getCoordinates(x, y) {\r\n      console.log(`x: ${x}, y: ${y}`)\r\n    },\r\n    chooseCamera(camera) {\r\n      console.log(camera.id)\r\n      this.camera = this.getCameraByID(camera.id)\r\n      this.getSectorsByCameraIDFromDB()\r\n      this.cameraSelected = true\r\n      this.resetSector()\r\n    },\r\n    chooseSector(sector) {\r\n      console.log(sector.id)\r\n      this.sector = this.getSectorByID(sector.id)\r\n      this.sectorSelected = true\r\n    },\r\n    resetCamera(){\r\n      console.log('reset')\r\n      this.$store.state.sectors = []\r\n      let cameraCopy = Object.assign({}, this.camera)\r\n      this.camera = cameraCopy\r\n      this.camera.id = null\r\n      this.camera.roomID = null\r\n      this.camera.name = ''\r\n      this.camera.ip = ''\r\n      this.camera.codec = ''\r\n      this.camera.chanel = ''\r\n      this.camera.login = ''\r\n      this.camera.password = ''\r\n      this.cameraSelected = false\r\n      this.v$.camera.$reset()\r\n      this.resetSector()\r\n    },\r\n    resetSector() {\r\n      this.sector.camId = null\r\n      this.sector.id = null\r\n      this.sector.name = ''\r\n      this.sector.points = []\r\n      this.sector.roomId = null\r\n      this.sector.typeId = null\r\n      this.sectorSelected = false\r\n    },\r\n    addSectorToCamera() {\r\n      console.log('p')\r\n      this.sector.camId = this.camera.id\r\n      this.$store.commit('setSector', Object.assign({}, this.sector))\r\n    },\r\n    ...mapActions([\r\n        'addCamera',\r\n        'removeCamera',\r\n        'removeSector'\r\n    ])\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ncanvas{\r\n  border: black;\r\n}\r\n.window{\r\n  box-shadow: 0 3px 4px rgba(0,0,0,.25);\r\n  border-radius: 10px ;\r\n}\r\n.input-field{\r\n  outline: none;\r\n  width: 200px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.input-field-sector{\r\n  outline: none;\r\n  width: 150px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.camera:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n.cam-name{\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  margin: 7px;\r\n}\r\n.cam-ip{\r\n  font-size: 12px;\r\n  font-weight: 300;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 30px;\r\n  margin-top: 10px;\r\n}\r\n.add{\r\n  width: 110px;\r\n  /*height: 35px;*/\r\n  position: absolute;\r\n  right: 0;\r\n  /*top: 0;*/\r\n  margin-right: 30px;\r\n  border-radius: 10px;\r\n  font-size: 18px;\r\n}\r\n.add:hover{\r\n  background-color: #dadada;\r\n}\r\n.field {\r\n  font-size: 22px;\r\n  font-weight: 700;\r\n}\r\n.hidden-button{\r\n  background: inherit;\r\n  border: none;\r\n  width: 25px;\r\n  /*vertical-align: center;*/\r\n}\r\n.hidden-button:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}