{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isReactive, isReadonly, computed, unref, ref, watch, isRef, reactive, nextTick, inject, provide, getCurrentInstance, onBeforeMount, onBeforeUnmount } from 'vue-demi';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\nfunction get(obj, stringPath, def) {\n  let current = obj;\n  const path = stringPath.split('.');\n  for (let i = 0; i < path.length; i++) {\n    if (!current[path[i]]) return def;\n    current = current[path[i]];\n  }\n  return current;\n}\nfunction gatherBooleanGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.some(path => {\n      return get(nestedResults, path, {\n        [property]: false\n      })[property];\n    });\n  });\n}\nfunction gatherArrayGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.reduce((all, path) => {\n      const fetchedProperty = get(nestedResults, path, {\n        [property]: false\n      })[property] || [];\n      return all.concat(fetchedProperty);\n    }, []);\n  });\n}\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if ($lazy && !$dirty.value || $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n    let ruleResult;\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      ruleResult = Promise.reject(err);\n    }\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value;\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n  const $unwatch = () => ({});\n  const $invalid = computed(() => {\n    if ($lazy && !$dirty.value || $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n    let returnValue = true;\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  let validationGroups = null;\n  validationKeys.forEach(key => {\n    const v = validations[key];\n    switch (true) {\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n      case key === '$validationGroups':\n        validationGroups = v;\n        break;\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  };\n}\nconst ROOT_PATH = '__root';\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false);\n  const $lastInvalidState = ref(false);\n  const $lastCommittedOn = ref(0);\n  if (cachedResult) {\n    if (!cachedResult.$partial) return cachedResult;\n    cachedResult.$unwatch();\n    $dirty.value = cachedResult.$dirty.value;\n  }\n  const result = {\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  if (!ruleKeys.length) {\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid));\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n  resultsCache.set(path, rules, result);\n  return result;\n}\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations);\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, []));\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n    set(v) {\n      results.$dirty.value = v;\n    }\n  });\n  const $silentErrors = computed(() => {\n    const modelErrors = unref(results.$silentErrors) || [];\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []);\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    const modelErrors = unref(results.$errors) || [];\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []);\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() => allResults.value.some(r => r.$invalid) || unref(results.$invalid) || false);\n  const $pending = computed(() => allResults.value.some(r => unref(r.$pending)) || unref(results.$pending) || false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n  const $touch = () => {\n    results.$touch();\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n  const $commit = () => {\n    results.$commit();\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n  const $reset = () => {\n    results.$reset();\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  };\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\nfunction setValidations(_ref) {\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key;\n  const {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  } = sortValidations(validations);\n  const mergedConfig = _objectSpread2(_objectSpread2({}, globalConfig), config);\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state;\n  const cachedExternalResults = _objectSpread2({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  });\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state);\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults);\n  const $validationGroups = {};\n  if (validationGroups) {\n    Object.entries(validationGroups).forEach(_ref2 => {\n      let [key, group] = _ref2;\n      $validationGroups[key] = {\n        $invalid: gatherBooleanGroupProperties(group, nestedResults, '$invalid'),\n        $error: gatherBooleanGroupProperties(group, nestedResults, '$error'),\n        $pending: gatherBooleanGroupProperties(group, nestedResults, '$pending'),\n        $errors: gatherArrayGroupProperties(group, nestedResults, '$errors'),\n        $silentErrors: gatherArrayGroupProperties(group, nestedResults, '$silentErrors')\n      };\n    });\n  }\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n  async function $validate() {\n    $touch();\n    if (mergedConfig.$rewardEarly) {\n      $commit();\n      await nextTick();\n    }\n    await nextTick();\n    return new Promise(resolve => {\n      if (!$pending.value) return resolve(!$invalid.value);\n      const unwatch = watch($pending, () => {\n        resolve(!$invalid.value);\n        unwatch();\n      });\n    });\n  }\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n  return reactive(_objectSpread2(_objectSpread2(_objectSpread2({}, results), {}, {\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults,\n    $validationGroups\n  }), nestedResults));\n}\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n}\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  }\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  function removeChildResultsFromParent(key) {\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key);\n    delete childResultsRaw[key];\n  }\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent);\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []);\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []);\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n  });\n}\nlet uid = 0;\nfunction useVuelidate(validations, state) {\n  var _getCurrentInstance;\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || ((_getCurrentInstance = getCurrentInstance()) === null || _getCurrentInstance === void 0 ? void 0 : _getCurrentInstance.proxy);\n  const componentOptions = instance ? instance.$options : {};\n  if (!$registerAs) {\n    uid += 1;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  };\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      state.value = instance;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance,\n          externalResults: $externalResults || instance.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance !== null && instance !== void 0 ? instance : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n  if (instance) {\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    }));\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n  return computed(() => {\n    return _objectSpread2(_objectSpread2({}, unref(validationResults.value)), childResults.value);\n  });\n}\nexport { CollectFlag, useVuelidate as default, useVuelidate };","map":{"version":3,"names":["isReactive","isReadonly","computed","unref","ref","watch","isRef","reactive","nextTick","inject","provide","getCurrentInstance","onBeforeMount","onBeforeUnmount","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","unwrapObj","ignoreKeys","undefined","reduce","o","k","includes","isFunction","val","isProxy","get","stringPath","def","current","path","split","gatherBooleanGroupProperties","group","nestedResults","property","some","gatherArrayGroupProperties","all","fetchedProperty","concat","callRule","rule","siblingState","instance","call","normalizeValidatorResponse","result","$valid","createAsyncResult","model","$pending","$dirty","_ref","$response","$lazy","$rewardEarly","watchTargets","$lastInvalidState","$lastCommittedOn","$invalid","$pendingCounter","$unwatch","ruleResult","err","Promise","reject","resolve","then","data","catch","error","immediate","deep","createSyncResult","_ref2","returnValue","createValidatorResult","config","validatorName","propertyKey","propertyPath","$params","$async","$validator","$watchTargets","message","$message","$model","$propertyPath","$property","sortValidations","validationsRaw","validations","validationKeys","rules","nestedValidators","validationGroups","v","startsWith","ROOT_PATH","createValidationResults","resultsCache","externalResults","ruleKeys","cachedResult","$partial","$path","$touch","$reset","$commit","set","ruleKey","$externalResults","map","stringError","index","$uid","r","$error","$silentErrors","res","$errors","Date","now","collectNestedValidationResults","nestedState","nestedExternalResults","nestedValidationKeys","results","nestedKey","setValidations","state","parentKey","globalConfig","createMetaFields","childResults","allResults","allRes","values","every","modelErrors","nestedErrors","errors","$anyDirty","nr","mergedConfig","s","cachedExternalResults","$validationGroups","entries","external","$autoDirty","flush","$validate","unwatch","$getResultsForChild","$clearExternalResults","assign","ResultsStorage","constructor","storage","Map","checkRulesValidity","storedRules","storedRulesKeys","newRulesKeys","hasAllValidators","paramKey","storedRuleResultPair","isValidCache","CollectFlag","COLLECT_ALL","COLLECT_NONE","VuelidateInjectChildResults","Symbol","VuelidateRemoveChildResults","nestedValidations","$scope","childResultsRaw","childResultsKeys","injectChildResultsIntoParent","$registerAs","childScope","$stopPropagation","__vuelidateInjectInstances","removeChildResultsFromParent","childKey","__vuelidateRemoveInstances","sendValidationResultsToParent","removeValidationResultsFromParent","ComputedProxyFactory","Proxy","prop","uid","useVuelidate","_getCurrentInstance","currentVueInstance","proxy","componentOptions","$options","validationResults","vuelidateExternalResults","validationsConfig","validationsWatchTarget","newValidationRules","f","default"],"sources":["D:/GitHub/SportSpot/UserFrontend/sport-spot-project/node_modules/@vuelidate/core/dist/index.mjs"],"sourcesContent":["import { isReactive, isReadonly, computed, unref, ref, watch, isRef, reactive, nextTick, inject, provide, getCurrentInstance, onBeforeMount, onBeforeUnmount } from 'vue-demi';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\nfunction get(obj, stringPath, def) {\n  let current = obj;\n  const path = stringPath.split('.');\n\n  for (let i = 0; i < path.length; i++) {\n    if (!current[path[i]]) return def;\n    current = current[path[i]];\n  }\n\n  return current;\n}\nfunction gatherBooleanGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.some(path => {\n      return get(nestedResults, path, {\n        [property]: false\n      })[property];\n    });\n  });\n}\nfunction gatherArrayGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.reduce((all, path) => {\n      const fetchedProperty = get(nestedResults, path, {\n        [property]: false\n      })[property] || [];\n      return all.concat(fetchedProperty);\n    }, []);\n  });\n}\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if ($lazy && !$dirty.value || $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n\n    let ruleResult;\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      ruleResult = Promise.reject(err);\n    }\n\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value;\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n\n  const $unwatch = () => ({});\n\n  const $invalid = computed(() => {\n    if ($lazy && !$dirty.value || $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n\n    let returnValue = true;\n\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  let validationGroups = null;\n  validationKeys.forEach(key => {\n    const v = validations[key];\n\n    switch (true) {\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n\n      case key === '$validationGroups':\n        validationGroups = v;\n        break;\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  };\n}\n\nconst ROOT_PATH = '__root';\n\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false);\n  const $lastInvalidState = ref(false);\n  const $lastCommittedOn = ref(0);\n\n  if (cachedResult) {\n    if (!cachedResult.$partial) return cachedResult;\n    cachedResult.$unwatch();\n    $dirty.value = cachedResult.$dirty.value;\n  }\n\n  const result = {\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n\n  if (!ruleKeys.length) {\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid));\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n\n  resultsCache.set(path, rules, result);\n  return result;\n}\n\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations);\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, []));\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n\n    set(v) {\n      results.$dirty.value = v;\n    }\n\n  });\n  const $silentErrors = computed(() => {\n    const modelErrors = unref(results.$silentErrors) || [];\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []);\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    const modelErrors = unref(results.$errors) || [];\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []);\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() => allResults.value.some(r => r.$invalid) || unref(results.$invalid) || false);\n  const $pending = computed(() => allResults.value.some(r => unref(r.$pending)) || unref(results.$pending) || false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n\n  const $touch = () => {\n    results.$touch();\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n\n  const $commit = () => {\n    results.$commit();\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n\n  const $reset = () => {\n    results.$reset();\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  };\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n\nfunction setValidations(_ref) {\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key;\n  const {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  } = sortValidations(validations);\n\n  const mergedConfig = _objectSpread2(_objectSpread2({}, globalConfig), config);\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state;\n\n  const cachedExternalResults = _objectSpread2({}, unref(externalResults) || {});\n\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  });\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state);\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults);\n  const $validationGroups = {};\n\n  if (validationGroups) {\n    Object.entries(validationGroups).forEach(_ref2 => {\n      let [key, group] = _ref2;\n      $validationGroups[key] = {\n        $invalid: gatherBooleanGroupProperties(group, nestedResults, '$invalid'),\n        $error: gatherBooleanGroupProperties(group, nestedResults, '$error'),\n        $pending: gatherBooleanGroupProperties(group, nestedResults, '$pending'),\n        $errors: gatherArrayGroupProperties(group, nestedResults, '$errors'),\n        $silentErrors: gatherArrayGroupProperties(group, nestedResults, '$silentErrors')\n      };\n    });\n  }\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n\n  async function $validate() {\n    $touch();\n\n    if (mergedConfig.$rewardEarly) {\n      $commit();\n      await nextTick();\n    }\n\n    await nextTick();\n    return new Promise(resolve => {\n      if (!$pending.value) return resolve(!$invalid.value);\n      const unwatch = watch($pending, () => {\n        resolve(!$invalid.value);\n        unwatch();\n      });\n    });\n  }\n\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n\n  return reactive(_objectSpread2(_objectSpread2(_objectSpread2({}, results), {}, {\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults,\n    $validationGroups\n  }), nestedResults));\n}\n\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n\n}\n\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  }\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n\n  function removeChildResultsFromParent(key) {\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key);\n    delete childResultsRaw[key];\n  }\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent);\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []);\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []);\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n\n  });\n}\n\nlet uid = 0;\nfunction useVuelidate(validations, state) {\n  var _getCurrentInstance;\n\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || ((_getCurrentInstance = getCurrentInstance()) === null || _getCurrentInstance === void 0 ? void 0 : _getCurrentInstance.proxy);\n  const componentOptions = instance ? instance.$options : {};\n\n  if (!$registerAs) {\n    uid += 1;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  };\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      state.value = instance;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance,\n          externalResults: $externalResults || instance.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance !== null && instance !== void 0 ? instance : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n\n  if (instance) {\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    }));\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n\n  return computed(() => {\n    return _objectSpread2(_objectSpread2({}, unref(validationResults.value)), childResults.value);\n  });\n}\n\nexport { CollectFlag, useVuelidate as default, useVuelidate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}