{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters } from 'vuex';\nimport { mapActions } from 'vuex';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, integer } from '@vuelidate/validators';\nexport default {\n  name: \"CamerasPage\",\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      camera: {\n        id: -1,\n        roomID: -1,\n        name: '',\n        IP: '',\n        channel: '',\n        codec: '',\n        login: '',\n        password: '',\n        sectors: []\n      },\n      sector: {\n        id: -1,\n        name: '',\n        type: ''\n      },\n      count: 0,\n      cameraSelected: false\n    };\n  },\n  validations: {\n    camera: {\n      name: {\n        required\n      },\n      IP: {\n        required\n      },\n      channel: {\n        required,\n        integer\n      },\n      codec: {\n        required\n      },\n      login: {\n        required\n      },\n      password: {\n        required\n      }\n    }\n  },\n  computed: {\n    getCamerasFromDB: function () {\n      fetch('http://localhost:5000/getCameras', {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.text()).then(response => {\n        console.log(response);\n      });\n    },\n    ...mapGetters(['getCameras', 'getCameraByID', 'getSectorTypes', 'getCameraCount'])\n  },\n  methods: {\n    getCamerasFromDB() {\n      fetch('http://localhost:5000/getCameras', {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.text()).then(response => {\n        console.log(response);\n      });\n    },\n    setCamera() {\n      fetch('http://localhost:5000/setCamera', {\n        method: 'POST',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          \"chanel\": this.camera.channel,\n          \"codec\": this.camera.codec,\n          \"id\": null,\n          \"ip\": this.camera.IP,\n          \"login\": this.camera.login,\n          \"name\": this.camera.name,\n          \"password\": this.camera.password\n        })\n      }).then(response => response.text()).then(response => {\n        let savedCamera = JSON.parse(response);\n        this.camera.id = savedCamera.id;\n      });\n    },\n    save() {\n      this.v$.camera.$touch();\n      if (!this.v$.camera.$error) {\n        console.log('Валидация прошла успешно');\n        this.setCamera();\n        // this.camera.id = this.getCameraCount\n        // this.addCameraCount(this.getCameraCount + 1)\n        let cameraCopy = Object.assign({}, this.camera);\n        let sectorsCopy = Object.assign({}, this.camera.sectors);\n        cameraCopy.sectors = sectorsCopy;\n        this.addCamera(cameraCopy);\n        this.v$.camera.$reset();\n      } else console.log('Валидация не прошла');\n    },\n    chooseCamera(camera) {\n      console.log(camera.id);\n      this.camera = this.getCameraByID(camera.id);\n      this.cameraSelected = true;\n    },\n    resetCamera() {\n      let cameraCopy = Object.assign({}, this.camera);\n      // let sectorsCopy = Object.assign({}, this.camera.sectors)\n      // cameraCopy.sectors = sectorsCopy\n      this.camera = cameraCopy;\n      this.camera.id = -1;\n      this.camera.roomID = -1;\n      this.camera.name = '';\n      this.camera.IP = '';\n      this.camera.codec = '';\n      this.camera.channel = '';\n      this.camera.login = '';\n      this.camera.password = '';\n      this.camera.sectors = [];\n      this.cameraSelected = false;\n      this.sector.name = '';\n      this.sector.type = '';\n      this.sector.id = -1;\n    },\n    addSectorToCamera() {\n      this.sector.id = this.count;\n      this.count++;\n      this.camera.sectors.push(Object.assign({}, this.sector));\n    },\n    ...mapActions(['addCamera', 'addCameraCount'])\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","useVuelidate","required","integer","name","setup","v$","data","camera","id","roomID","IP","channel","codec","login","password","sectors","sector","type","count","cameraSelected","validations","computed","getCamerasFromDB","fetch","method","cors","headers","then","response","text","console","log","methods","setCamera","body","JSON","stringify","savedCamera","parse","save","$touch","$error","cameraCopy","Object","assign","sectorsCopy","addCamera","$reset","chooseCamera","getCameraByID","resetCamera","addSectorToCamera","push"],"sources":["D:\\GitHub\\SportSpot\\UserFrontend\\sport-spot-project\\src\\components\\CamerasPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container\" >\r\n      <div class=\"row justify-content-around\">\r\n        <div class=\"col-3\">\r\n            <div class=\"row\">\r\n              <label class=\"field\">Камеры</label>\r\n              <button class=\"add\" style=\"margin-top: 5px\" @click=\"resetCamera\">Добавить</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n          <label class=\"field\">Настройка</label>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <label class=\"field\">Просмотр</label>\r\n        </div>\r\n        <div class=\"col-3\" >\r\n          <div class=\"row window camera col-12\" @click=\"chooseCamera(camera)\" v-for=\"(camera, index) in getCamerasFromDB\"\r\n               :key=\"index\">\r\n              <span class=\"cam-name\">{{camera.name}}</span>\r\n              <span class=\"cam-ip\">{{camera.IP}}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-4 window\">\r\n          <label style=\"font-weight: 700; margin-top: 10px\">Изображение</label>\r\n          <form @submit.prevent=\"save\" style=\"margin-top: 10px\">\r\n            <div class=\"\">\r\n              <label> Название: </label>\r\n              <input class=\" input-field\" type=\"text\" v-model.trim=\"camera.name\"\r\n                     :class=\"v$.camera.name.$error ? 'is-invalid' : ''\" >\r\n              <p v-if=\"v$.camera.name.$dirty && v$.camera.name.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> IP: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.IP\"\r\n                     :class=\"v$.camera.IP.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.IP.$dirty && v$.camera.IP.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Канал: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.channel\"\r\n                     :class=\"v$.camera.channel.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.channel.$dirty && v$.camera.channel.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n              <p v-if=\"v$.camera.channel.$dirty && v$.camera.channel.integer.$invalid \" class=\"invalid-feedback\">\r\n                Канал должен быть числом\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Кодек: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.codec\"\r\n                     :class=\"v$.camera.codec.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.codec.$dirty && v$.camera.codec.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Логин: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.login\"\r\n                     :class=\"v$.camera.login.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.login.$dirty && v$.camera.login.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Пароль: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.password\"\r\n                     :class=\"v$.camera.password.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.password.$dirty && v$.camera.password.required.$invalid \" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"form-group\" >\r\n              <button type=\"submit\" class=\"btn btn-primary\" >Сохранить</button>\r\n            </div>\r\n          </form>\r\n          <label style=\"font-weight: 700\">Сектора</label>\r\n          <button style=\"position: absolute; right: 0; margin-right: 30px\" @click=\"addSectorToCamera\">Добавить</button>\r\n          <div class=\"\" v-for=\"(cameraSector, index) in camera.sectors\" :key=\"index\">\r\n            <input class=\"input-field-sector\" type=\"text\" v-model.trim=\"cameraSector.name\" placeholder=\"Название\">\r\n            <select v-model=\"cameraSector.type\">\r\n              <option v-for=\"(sectorType, index) in getSectorTypes\" :key=\"index\">\r\n                {{sectorType}}\r\n              </option>\r\n            </select>\r\n          </div>\r\n          <br>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <div class=\"col-12 window\">\r\n            <p>Изображение</p>\r\n<!--            <img src=\"http://192.168.248.32:5000/videoStream\" style=\"width: 100%\">-->\r\n            <img :src=\"require('../assets/images/img1.png')\" style=\"width: 100%\" alt=\"img1\">\r\n            <p>Информация сектора</p>\r\n            <p>Сектор</p>\r\n            <span>Техническая информация:</span>\r\n            <ul>\r\n              <li>Границы:</li>\r\n              <li>Высота от пола:</li>\r\n              <li>Тип сектора: <span v-if=\"cameraSelected\">{{camera.sectors.type}}</span></li>\r\n            </ul>\r\n            <p>Справка:</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from 'vuex'\r\nimport {mapActions} from 'vuex'\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, integer} from '@vuelidate/validators'\r\n\r\nexport default {\r\n  name: \"CamerasPage\",\r\n  setup () {\r\n    return {\r\n      v$: useVuelidate()\r\n    }\r\n  },\r\n  data(){\r\n    return {\r\n      camera: {\r\n        id : -1,\r\n        roomID: -1,\r\n        name: '',\r\n        IP: '',\r\n        channel : '',\r\n        codec : '',\r\n        login : '',\r\n        password : '',\r\n        sectors: []\r\n      },\r\n      sector: {\r\n        id: -1,\r\n        name: '',\r\n        type: ''\r\n      },\r\n      count: 0,\r\n      cameraSelected: false\r\n    }\r\n  },\r\n  validations: {\r\n    camera: {\r\n      name: {required},\r\n      IP: {required},\r\n      channel: {required, integer},\r\n      codec: {required},\r\n      login: { required },\r\n      password: {required},\r\n    }\r\n  },\r\n  computed: {\r\n    getCamerasFromDB: function () {\r\n      fetch('http://localhost:5000/getCameras', {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.text())\r\n          .then((response) => {\r\n            console.log(response)\r\n          });\r\n    },\r\n    ...mapGetters([\r\n        'getCameras',\r\n        'getCameraByID',\r\n        'getSectorTypes',\r\n        'getCameraCount'\r\n    ]),\r\n  },\r\n  methods: {\r\n    getCamerasFromDB() {\r\n      fetch('http://localhost:5000/getCameras', {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.text())\r\n          .then((response) => {\r\n            console.log(response)\r\n          });\r\n    },\r\n    setCamera() {\r\n      fetch('http://localhost:5000/setCamera', {\r\n        method: 'POST',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n\r\n        },\r\n        body: JSON.stringify({\r\n          \"chanel\": this.camera.channel,\r\n          \"codec\": this.camera.codec,\r\n          \"id\": null,\r\n          \"ip\": this.camera.IP,\r\n          \"login\": this.camera.login,\r\n          \"name\": this.camera.name,\r\n          \"password\": this.camera.password\r\n        })\r\n      })\r\n          .then(response => response.text())\r\n          .then((response) => {\r\n            let savedCamera = JSON.parse(response)\r\n            this.camera.id = savedCamera.id\r\n          });\r\n    },\r\n    save() {\r\n      this.v$.camera.$touch()\r\n      if (!this.v$.camera.$error) {\r\n        console.log('Валидация прошла успешно')\r\n        this.setCamera()\r\n        // this.camera.id = this.getCameraCount\r\n        // this.addCameraCount(this.getCameraCount + 1)\r\n        let cameraCopy = Object.assign({}, this.camera)\r\n        let sectorsCopy = Object.assign({}, this.camera.sectors)\r\n        cameraCopy.sectors = sectorsCopy\r\n        this.addCamera(cameraCopy)\r\n        this.v$.camera.$reset()\r\n      }\r\n      else console.log('Валидация не прошла')\r\n    },\r\n    chooseCamera(camera) {\r\n      console.log(camera.id)\r\n      this.camera = this.getCameraByID(camera.id)\r\n      this.cameraSelected = true\r\n    },\r\n    resetCamera(){\r\n      let cameraCopy = Object.assign({}, this.camera)\r\n      // let sectorsCopy = Object.assign({}, this.camera.sectors)\r\n      // cameraCopy.sectors = sectorsCopy\r\n      this.camera = cameraCopy\r\n      this.camera.id = -1\r\n      this.camera.roomID = -1\r\n      this.camera.name = ''\r\n      this.camera.IP = ''\r\n      this.camera.codec = ''\r\n      this.camera.channel = ''\r\n      this.camera.login = ''\r\n      this.camera.password = ''\r\n      this.camera.sectors = []\r\n      this.cameraSelected = false\r\n      this.sector.name = ''\r\n      this.sector.type = ''\r\n      this.sector.id = -1\r\n    },\r\n    addSectorToCamera() {\r\n      this.sector.id = this.count\r\n      this.count++\r\n      this.camera.sectors.push(Object.assign({}, this.sector))\r\n    },\r\n    ...mapActions([\r\n      'addCamera',\r\n        'addCameraCount'\r\n    ])\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.window{\r\n  box-shadow: 0 3px 4px rgba(0,0,0,.25);\r\n  border-radius: 10px ;\r\n}\r\n.input-field{\r\n  outline: none;\r\n  width: 200px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.input-field-sector{\r\n  outline: none;\r\n  width: 150px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.camera:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n.cam-name{\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  margin: 7px;\r\n}\r\n.cam-ip{\r\n  font-size: 12px;\r\n  font-weight: 300;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 30px;\r\n  margin-top: 10px;\r\n}\r\n.add{\r\n  width: 110px;\r\n  /*height: 35px;*/\r\n  position: absolute;\r\n  right: 0;\r\n  /*top: 0;*/\r\n  margin-right: 30px;\r\n  border-radius: 10px;\r\n  font-size: 18px;\r\n}\r\n.add:hover{\r\n  background-color: #dadada;\r\n}\r\n.field {\r\n  font-size: 22px;\r\n  font-weight: 700;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}