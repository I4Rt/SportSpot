{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { createApp } from 'vue'\nimport { createStore } from 'vuex';\n// import axios from \"axios\";\n\nexport default createStore({\n  state() {\n    return {\n      tasks: [],\n      cameras: [],\n      rooms: [],\n      sectors: [],\n      sectorTypes: [],\n      unusedCameras: {},\n      usedCameras: {}\n    };\n  },\n  mutations: {\n    setCameras(state, camera) {\n      state.cameras.push(camera);\n    },\n    removeCamera(state, id) {\n      state.cameras = state.cameras.filter(camera => camera.id !== id);\n    },\n    removeRoom(state, id) {\n      state.rooms = state.rooms.filter(room => room.id !== id);\n    },\n    removeSector(state, id) {\n      state.sectors = state.sectors.filter(sector => sector.id !== id);\n    },\n    updateCamera(state, oldCamera, newCamera) {\n      oldCamera = newCamera;\n    },\n    setRooms(state, room) {\n      state.rooms.push(room);\n    },\n    setSector(state, sector) {\n      state.sectors.push(sector);\n    },\n    setTask(state, task) {\n      state.rooms.push(task);\n    }\n  },\n  actions: {\n    addCamera({\n      commit\n    }, newCamera) {\n      commit('setCameras', newCamera);\n    },\n    async removeCamera({\n      commit\n    }, id) {\n      console.log('remove');\n      await fetch(`http://localhost:5000/removeCamera?id=${id}`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        if (response.OperationStatus === \"Done\") {\n          commit('removeCamera', id);\n        }\n      });\n    },\n    removeRoom({\n      commit\n    }, id) {\n      fetch(`http://localhost:5000/removeRoom?id=${id}`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        if (response.OperationStatus === \"Done\") {\n          commit('removeRoom', id);\n        }\n      });\n    },\n    removeSector({\n      commit\n    }, id) {\n      fetch(`http://localhost:5000/removeSector?id=${id}`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        if (response.OperationStatus === \"Done\") {\n          commit('removeSector', id);\n        }\n      });\n    },\n    addRoom({\n      commit\n    }, newRoom) {\n      commit('setRooms', newRoom);\n    }\n  },\n  getters: {\n    getCameras(state) {\n      return state.cameras;\n    },\n    getCameraByID: state => id => {\n      return state.cameras.find(camera => camera.id === id);\n    },\n    getSectors(state) {\n      return state.sectors;\n    },\n    getSectorByID: state => id => {\n      return state.sectors.find(sector => sector.id === id);\n    },\n    getSectorsByCameraID: state => id => {\n      return state.sectors.filter(sector => sector.camId === id);\n    },\n    getSectorTypes(state) {\n      return state.sectorTypes;\n    },\n    getSectorTypeByID: state => id => {\n      return state.sectorTypes.find(sectorType => sectorType.id === id);\n    },\n    getRooms(state) {\n      return state.rooms;\n    },\n    getRoomByID: state => id => {\n      return state.rooms.find(room => room.id === id);\n    },\n    // getUnusedSectorByID: (state) => (id) => {\n    //     for (let i = 0; i < state.unusedCameras.camerasList.length; i++){\n    //         for (let j = 0; j < state.unusedCameras.camerasList[i].sectors.length; j++){\n    //             if (state.unusedCameras.camerasList[i].sectors[j].id === id){\n    //                 return state.unusedCameras.camerasList[i].sectors[j]\n    //             }\n    //         }\n    //     }\n    // },\n    getUsedCameras(state) {\n      return state.usedCameras.camerasList;\n    },\n    getUnusedCameras(state) {\n      return state.unusedCameras.camerasList;\n    }\n  }\n});","map":{"version":3,"names":["createStore","state","tasks","cameras","rooms","sectors","sectorTypes","unusedCameras","usedCameras","mutations","setCameras","camera","push","removeCamera","id","filter","removeRoom","room","removeSector","sector","updateCamera","oldCamera","newCamera","setRooms","setSector","setTask","task","actions","addCamera","commit","console","log","fetch","method","cors","headers","then","response","json","OperationStatus","addRoom","newRoom","getters","getCameras","getCameraByID","find","getSectors","getSectorByID","getSectorsByCameraID","camId","getSectorTypes","getSectorTypeByID","sectorType","getRooms","getRoomByID","getUsedCameras","camerasList","getUnusedCameras"],"sources":["D:/GitHub/SportSpot/UserFrontend/sport-spot-project/src/vuex/store.js"],"sourcesContent":["// import { createApp } from 'vue'\r\nimport { createStore } from 'vuex'\r\n// import axios from \"axios\";\r\n\r\nexport default createStore({\r\n    state () {\r\n        return {\r\n            tasks: [],\r\n            cameras: [],\r\n            rooms: [],\r\n            sectors: [],\r\n            sectorTypes: [],\r\n            unusedCameras: {},\r\n            usedCameras: {}\r\n        }\r\n    },\r\n    mutations: {\r\n        setCameras (state, camera) {\r\n            state.cameras.push(camera)\r\n        },\r\n        removeCamera (state, id) {\r\n            state.cameras = state.cameras.filter((camera) => camera.id !== id)\r\n        },\r\n        removeRoom (state, id) {\r\n            state.rooms = state.rooms.filter((room) => room.id !== id)\r\n        },\r\n        removeSector (state, id) {\r\n            state.sectors = state.sectors.filter((sector) => sector.id !== id)\r\n        },\r\n        updateCamera (state, oldCamera, newCamera) {\r\n            oldCamera = newCamera\r\n        },\r\n        setRooms (state, room) {\r\n            state.rooms.push(room)\r\n        },\r\n        setSector (state, sector) {\r\n            state.sectors.push(sector)\r\n        },\r\n        setTask (state, task) {\r\n            state.rooms.push(task)\r\n        }\r\n    },\r\n    actions: {\r\n        addCamera({commit}, newCamera) {\r\n            commit('setCameras', newCamera)\r\n        },\r\n        async removeCamera({commit}, id) {\r\n            console.log('remove')\r\n            await fetch(`http://localhost:5000/removeCamera?id=${id}`, {\r\n                method: 'GET',\r\n                cors: 'no-cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8',\r\n                },\r\n            })\r\n                .then(response => response.json())\r\n                .then((response) => {\r\n                    if (response.OperationStatus === \"Done\"){\r\n                        commit('removeCamera', id)\r\n                    }\r\n                })\r\n        },\r\n        removeRoom({commit}, id) {\r\n            fetch(`http://localhost:5000/removeRoom?id=${id}`, {\r\n                method: 'GET',\r\n                cors: 'no-cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8',\r\n                },\r\n            })\r\n                .then(response => response.json())\r\n                .then((response) => {\r\n                    if (response.OperationStatus === \"Done\"){\r\n                        commit('removeRoom', id)\r\n                    }\r\n                })\r\n        },\r\n        removeSector({commit}, id) {\r\n            fetch(`http://localhost:5000/removeSector?id=${id}`, {\r\n                method: 'GET',\r\n                cors: 'no-cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8',\r\n                },\r\n            })\r\n                .then(response => response.json())\r\n                .then((response) => {\r\n                    if (response.OperationStatus === \"Done\"){\r\n                        commit('removeSector', id)\r\n                    }\r\n                })\r\n        },\r\n        addRoom({commit}, newRoom) {\r\n            commit('setRooms', newRoom)\r\n        },\r\n\r\n    },\r\n    getters: {\r\n        getCameras(state) {\r\n            return state.cameras\r\n        },\r\n        getCameraByID: (state) => (id) => {\r\n            return state.cameras.find(camera => camera.id === id)\r\n        },\r\n        getSectors(state) {\r\n          return state.sectors\r\n        },\r\n        getSectorByID: (state) => (id) => {\r\n            return state.sectors.find(sector => sector.id === id)\r\n        },\r\n        getSectorsByCameraID: (state) => (id) => {\r\n            return state.sectors.filter(sector => sector.camId === id)\r\n        },\r\n        getSectorTypes(state) {\r\n            return state.sectorTypes\r\n        },\r\n        getSectorTypeByID: (state) => (id) => {\r\n            return state.sectorTypes.find(sectorType => sectorType.id === id)\r\n        },\r\n        getRooms(state) {\r\n            return state.rooms\r\n        },\r\n        getRoomByID: (state) => (id) => {\r\n            return state.rooms.find(room => room.id === id)\r\n        },\r\n        // getUnusedSectorByID: (state) => (id) => {\r\n        //     for (let i = 0; i < state.unusedCameras.camerasList.length; i++){\r\n        //         for (let j = 0; j < state.unusedCameras.camerasList[i].sectors.length; j++){\r\n        //             if (state.unusedCameras.camerasList[i].sectors[j].id === id){\r\n        //                 return state.unusedCameras.camerasList[i].sectors[j]\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // },\r\n        getUsedCameras(state) {\r\n            return state.usedCameras.camerasList\r\n        },\r\n        getUnusedCameras(state) {\r\n            return state.unusedCameras.camerasList\r\n        }\r\n    },\r\n})\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}