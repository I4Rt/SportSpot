{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters } from 'vuex';\nimport { mapActions } from 'vuex';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, integer } from '@vuelidate/validators';\nexport default {\n  name: \"CamerasPage\",\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      ctx: null,\n      drawClicks: 0,\n      camera: {\n        id: null,\n        roomID: null,\n        name: '',\n        ip: '',\n        chanel: '',\n        codec: '',\n        login: '',\n        password: ''\n      },\n      sector: {\n        camId: null,\n        id: null,\n        name: '',\n        points: [],\n        roomId: null,\n        typeId: null\n      },\n      cameraSelected: false,\n      sectorSelected: false\n    };\n  },\n  validations: {\n    camera: {\n      name: {\n        required\n      },\n      ip: {\n        required\n      },\n      chanel: {\n        required,\n        integer\n      },\n      codec: {\n        required\n      },\n      login: {\n        required\n      },\n      password: {\n        required\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['getCameras', 'getCameraByID', 'getSectorTypes', 'getSectorsByCameraID', 'getSectors', 'getSectorByID', 'getSectorTypeByID'])\n  },\n  mounted() {\n    if (this.getCameras.length === 0) {\n      this.getCamerasFromDB();\n    }\n    if (this.getSectorTypes.length === 0) {\n      this.getSectorTypesFromDB();\n    }\n    this.draw();\n  },\n  methods: {\n    getSectorTypesFromDB() {\n      fetch(`http://localhost:5000/getSectorTypes`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        console.log('sectorTypes ');\n        this.$store.state.sectorTypes = response;\n        console.log(this.$store.state.sectorTypes);\n      });\n    },\n    getSectorsByCameraIDFromDB() {\n      fetch(`http://localhost:5000/getSectorsByCameraID?id=${this.camera.id}`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        console.log('preload');\n        // let preloaderEl = document.getElementById('preloaded')\n        // preloaderEl.classList.add('hidden');\n        console.log('sectors ');\n        console.log(response[0]);\n        this.$store.state.sectors = response;\n        console.log(this.$store.state.sectors);\n      });\n    },\n    getCamerasFromDB() {\n      fetch('http://localhost:5000/getCameras', {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.$store.state.cameras = response;\n      });\n    },\n    setSector(sector) {\n      console.log('sector ' + sector);\n      let returnedSector = fetch('http://localhost:5000/setSector', {\n        method: 'POST',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          \"camId\": sector.camId,\n          \"id\": sector.id,\n          \"name\": sector.name,\n          \"points\": sector.points,\n          \"roomId\": sector.roomId,\n          \"typeId\": sector.typeId\n        })\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        sector.id = response.id;\n        return sector;\n      });\n      return returnedSector;\n    },\n    setCamera() {\n      fetch('http://localhost:5000/setCamera', {\n        method: 'POST',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          \"chanel\": this.camera.chanel,\n          \"codec\": this.camera.codec,\n          \"id\": this.camera.id,\n          \"ip\": this.camera.ip,\n          \"login\": this.camera.login,\n          \"name\": this.camera.name,\n          \"password\": this.camera.password\n        })\n      }).then(response => response.json()).then(response => {\n        this.camera.id = response.id;\n        let cameraCopy = Object.assign({}, this.camera);\n        console.log('check');\n        if (this.getCameraByID(cameraCopy.id) === undefined) {\n          this.addCamera(cameraCopy);\n          console.log('yesCheck');\n        }\n        console.log('noCheck');\n        this.getSectors.forEach(sector => {\n          sector.camId = this.camera.id;\n          this.setSector(sector);\n        });\n      });\n    },\n    save() {\n      this.v$.camera.$touch();\n      if (!this.v$.camera.$error) {\n        console.log('Валидация прошла успешно');\n        this.setCamera();\n      } else console.log('Валидация не прошла');\n    },\n    endDraw() {\n      this.ctx.lineTo(this.sector.points[0][0], this.sector.points[0][1]);\n      this.ctx.stroke();\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\";\n      this.ctx.fill();\n      this.drawClicks = 0;\n    },\n    drawLine(x, y) {\n      if (this.sectorSelected) {\n        let targetCoords = document.getElementById('canvas').getBoundingClientRect();\n        let newX = x - targetCoords.left;\n        let newY = y - targetCoords.top;\n        console.log(`x: ${x} y: ${y} newX: ${newX} newY: ${newY} left: ${targetCoords.left} right: ${targetCoords.top}`);\n        if (this.drawClicks === 0) {\n          this.ctx.moveTo(newX, newY);\n        } else this.ctx.lineTo(newX, newY);\n        this.sector.points.push([newX, newY]);\n        this.ctx.arc(newX, newY, 2, 0, Math.PI * 2);\n        this.ctx.strokeStyle = \"rgba(255, 230, 0)\";\n        this.ctx.lineWidth = 2;\n        this.ctx.stroke();\n        this.drawClicks++;\n      } else alert(\"Выберите сектор\");\n    },\n    draw() {\n      let canvas = document.getElementById('canvas');\n      if (canvas.getContext) {\n        console.log('getContext');\n        this.ctx = canvas.getContext(\"2d\");\n        this.ctx.beginPath();\n        // this.drawImage()\n      }\n    },\n\n    removeSectorPoints() {\n      this.ctx.clearRect(0, 0, 300, 300);\n      this.sector.points = [];\n      // this.drawImage();\n      this.ctx.beginPath();\n    },\n    drawClear() {\n      this.ctx.clearRect(0, 0, 300, 300);\n      this.ctx.beginPath();\n    },\n    drawImage() {\n      let img = document.getElementById('putImage');\n      img;\n      console.log(img);\n      this.ctx.drawImage(img, 0, 0, 779, 584, 0, 0, 300, 300);\n    },\n    drawSectorPoints() {\n      console.log('drawSectorPoints');\n      // this.drawImage()\n      let points = this.sector.points;\n      this.ctx.moveTo(points[0][0], points[0][1]);\n      this.ctx.arc(points[0][0], points[0][1], 2, 0, Math.PI * 2);\n      for (let i = 1; i < points.length; i++) {\n        this.ctx.lineTo(points[i][0], points[i][1]);\n        this.ctx.arc(points[i][0], points[i][1], 2, 0, Math.PI * 2);\n      }\n      this.ctx.lineTo(points[0][0], points[0][1]);\n      this.ctx.strokeStyle = \"rgba(255, 230, 0)\";\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\";\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n      this.ctx.fill();\n      //\n    },\n\n    chooseCamera(camera) {\n      console.log(camera.id);\n      this.camera = this.getCameraByID(camera.id);\n      this.getSectorsByCameraIDFromDB();\n      this.cameraSelected = true;\n      this.resetSector();\n    },\n    chooseSector(sector) {\n      if (this.sector.id === sector.id && sector.id !== null) {\n        console.log(this.sector.id + ' ' + sector.id + ' resetSec');\n        this.resetSector();\n      } else if (sector.name === '' || sector.typeId === null) alert(\"Сначала введите название сектора и выберите его тип\");else if (sector.id === null) {\n        let p1 = this.setSector(sector);\n        p1.then(value => {\n          console.log(value.id);\n          this.showSector(value);\n        });\n      } else this.showSector(sector);\n    },\n    showSector(sector) {\n      if (sector.id !== null) {\n        this.sector = this.getSectorByID(sector.id);\n        this.sectorSelected = true;\n        this.drawClear();\n        // this.drawImage()\n        if (this.sector.points.length !== 0) {\n          this.drawSectorPoints();\n        }\n      }\n    },\n    resetCamera() {\n      console.log('reset');\n      this.$store.state.sectors = [];\n      let cameraCopy = Object.assign({}, this.camera);\n      this.camera = cameraCopy;\n      this.camera.id = null;\n      this.camera.roomID = null;\n      this.camera.name = '';\n      this.camera.ip = '';\n      this.camera.codec = '';\n      this.camera.chanel = '';\n      this.camera.login = '';\n      this.camera.password = '';\n      this.cameraSelected = false;\n      this.v$.camera.$reset();\n      this.resetSector();\n      this.drawClear();\n    },\n    resetSector() {\n      this.drawClear();\n      let sectorCopy = Object.assign({}, this.sector);\n      this.sector = sectorCopy;\n      this.sector.camId = null;\n      this.sector.id = null;\n      this.sector.name = '';\n      this.sector.points = [];\n      this.sector.roomId = null;\n      this.sector.typeId = null;\n      this.sectorSelected = false;\n    },\n    addSectorToCamera() {\n      console.log('p');\n      this.resetSector();\n      this.sector.camId = this.camera.id;\n      this.$store.commit('setSector', Object.assign({}, this.sector));\n    },\n    ...mapActions(['addCamera', 'removeCamera', 'removeSector'])\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","useVuelidate","required","integer","name","setup","v$","data","ctx","drawClicks","camera","id","roomID","ip","chanel","codec","login","password","sector","camId","points","roomId","typeId","cameraSelected","sectorSelected","validations","computed","mounted","getCameras","length","getCamerasFromDB","getSectorTypes","getSectorTypesFromDB","draw","methods","fetch","method","cors","headers","then","response","json","console","log","$store","state","sectorTypes","getSectorsByCameraIDFromDB","sectors","cameras","setSector","returnedSector","body","JSON","stringify","setCamera","cameraCopy","Object","assign","getCameraByID","undefined","addCamera","getSectors","forEach","save","$touch","$error","endDraw","lineTo","stroke","fillStyle","fill","drawLine","x","y","targetCoords","document","getElementById","getBoundingClientRect","newX","left","newY","top","moveTo","push","arc","Math","PI","strokeStyle","lineWidth","alert","canvas","getContext","beginPath","removeSectorPoints","clearRect","drawClear","drawImage","img","drawSectorPoints","i","chooseCamera","resetSector","chooseSector","p1","value","showSector","getSectorByID","resetCamera","$reset","sectorCopy","addSectorToCamera","commit"],"sources":["D:\\GitHub\\SportSpot\\UserFrontend\\sport-spot-project\\src\\components\\CamerasPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container\" >\r\n      <div class=\"row justify-content-around\">\r\n        <div class=\"col-3\">\r\n            <div class=\"row\">\r\n              <label class=\"field\">Камеры</label>\r\n              <button class=\"add\" style=\"margin-top: 5px\" @click=\"resetCamera\">Добавить</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n          <label class=\"field\">Настройка</label>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <label class=\"field\">Просмотр</label>\r\n        </div>\r\n        <div class=\"col-3\" >\r\n          <div class=\"row window camera col-12\" @click=\"chooseCamera(camera)\" v-for=\"(camera, index) in getCameras\"\r\n               :key=\"index\">\r\n              <span class=\"cam-name\">{{camera.name}}</span>\r\n              <span class=\"cam-ip\">{{camera.ip}}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-4 window\">\r\n          <label style=\"font-weight: 700; margin-top: 10px\">Изображение</label>\r\n          <form @submit.prevent=\"save\" style=\"margin-top: 10px\">\r\n            <div class=\"\">\r\n              <label> Название: </label>\r\n              <input class=\" input-field\" type=\"text\" v-model.trim=\"camera.name\"\r\n                     :class=\"v$.camera.name.$error ? 'is-invalid' : ''\" >\r\n              <p v-if=\"v$.camera.name.$dirty && v$.camera.name.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> ip: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.ip\"\r\n                     :class=\"v$.camera.ip.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.ip.$dirty && v$.camera.ip.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Канал: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.chanel\"\r\n                     :class=\"v$.camera.chanel.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.integer.$invalid \" class=\"invalid-feedback\">\r\n                Канал должен быть числом\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Кодек: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.codec\"\r\n                     :class=\"v$.camera.codec.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.codec.$dirty && v$.camera.codec.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Логин: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.login\"\r\n                     :class=\"v$.camera.login.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.login.$dirty && v$.camera.login.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Пароль: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.password\"\r\n                     :class=\"v$.camera.password.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.password.$dirty && v$.camera.password.required.$invalid \" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div style=\"width: 50px; margin-bottom: 10px\">\r\n                <button type=\"submit\" class=\"btn btn-success\" >Сохранить</button>\r\n              </div>\r\n          </form>\r\n          <button\r\n              class=\"btn btn-primary\"\r\n              @click=\"removeCamera(camera.id); resetCamera()\"\r\n              style=\"position: absolute; top: 0; right: 0; margin-right: 15px; margin-top: 244px\">\r\n            Удалить\r\n          </button>\r\n          <label style=\"font-weight: 700\">Сектора</label>\r\n\r\n          <button style=\"position: absolute; right: 0; margin-right: 30px\" @click=\"addSectorToCamera\">Добавить</button>\r\n          <div v-if=\"getSectors.length === 0\" id=\"preloaded\" class=\"hidden\"></div>\r\n          <div class=\"\" v-for=\"(cameraSector, index) in getSectorsByCameraID(this.camera.id)\" :key=\"index\">\r\n            <input class=\"input-field-sector\" type=\"text\" v-model.trim=\"cameraSector.name\" placeholder=\"Название\">\r\n            <select v-model=\"cameraSector.typeId\">\r\n              <option v-for=\"(sectorType, index) in getSectorTypes\" :value=\"sectorType.id\" :key=\"index\">\r\n                {{sectorType.name}}\r\n              </option>\r\n            </select>\r\n            <button class=\"hidden-button\" @click=\"chooseSector(cameraSector)\" style=\"margin-left: 5px\">\r\n              <img v-if=\"sectorSelected && sector.id === cameraSector.id\" style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/eye-opened.png')\" alt=\"\">\r\n              <img v-else style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/eye-closed.png')\" alt=\"\">\r\n            </button>\r\n            <button class=\"hidden-button\" @click=\"removeSector(cameraSector.id); drawClear()\" style=\"margin-left: 10px\">\r\n              <img style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/delete.png')\" alt=\"\">\r\n            </button>\r\n          </div>\r\n          <br>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <div class=\"col-12 window\">\r\n            <p>Изображение</p>\r\n            <div style=\"width: 300px; height: 300px\">\r\n              <img id=\"putImage\" :src=\"require('../assets/images/img1.png')\" style=\"width: 100%; height: 100%\"  alt=\"img1\">\r\n              <canvas\r\n                  @click=\"drawLine($event.clientX, $event.clientY)\"\r\n                  id=\"canvas\"\r\n                  width=\"300\" height=\"300\"\r\n                  style=\"position: absolute; top: 0; left: 0; margin-top: 40px; margin-left: 14px\"\r\n              >\r\n              </canvas>\r\n            </div>\r\n<!--            <img src=\"http://localhost:5000/videoStream\" style=\"width: 100%\">-->\r\n            <br>\r\n            <button @click=\"endDraw\">Заполнить область</button>\r\n            <button @click=\"removeSectorPoints\">Очистить всё</button>\r\n            <p>Информация сектора</p>\r\n            <p>Сектор {{sector.name}}</p>\r\n            <span>Техническая информация:</span>\r\n            <ul>\r\n              <li>Границы:</li>\r\n              <li>Высота от пола:</li>\r\n              <li>Тип сектора: <span v-if=\"sectorSelected\">{{getSectorTypeByID(sector.typeId).name}}</span></li>\r\n            </ul>\r\n            <p>Справка:</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from 'vuex'\r\nimport {mapActions} from 'vuex'\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, integer} from '@vuelidate/validators'\r\n\r\nexport default {\r\n  name: \"CamerasPage\",\r\n  setup () {\r\n    return {\r\n      v$: useVuelidate()\r\n    }\r\n  },\r\n  data(){\r\n    return {\r\n      ctx: null,\r\n      drawClicks: 0,\r\n      camera: {\r\n        id : null,\r\n        roomID: null,\r\n        name: '',\r\n        ip: '',\r\n        chanel : '',\r\n        codec : '',\r\n        login : '',\r\n        password : '',\r\n      },\r\n      sector: {\r\n        camId: null,\r\n        id: null,\r\n        name: '',\r\n        points: [],\r\n        roomId: null,\r\n        typeId: null,\r\n      },\r\n      cameraSelected: false,\r\n      sectorSelected: false\r\n    }\r\n  },\r\n  validations: {\r\n    camera: {\r\n      name: {required},\r\n      ip: {required},\r\n      chanel: {required, integer},\r\n      codec: {required},\r\n      login: { required },\r\n      password: {required},\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n        'getCameras',\r\n        'getCameraByID',\r\n        'getSectorTypes',\r\n        'getSectorsByCameraID',\r\n        'getSectors',\r\n        'getSectorByID',\r\n        'getSectorTypeByID'\r\n    ])\r\n  },\r\n  mounted() {\r\n    if (this.getCameras.length === 0){\r\n      this.getCamerasFromDB()\r\n    }\r\n    if (this.getSectorTypes.length === 0){\r\n      this.getSectorTypesFromDB()\r\n    }\r\n    this.draw()\r\n  },\r\n  methods: {\r\n    getSectorTypesFromDB() {\r\n      fetch(`http://localhost:5000/getSectorTypes`, {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log('sectorTypes ')\r\n            this.$store.state.sectorTypes = response\r\n            console.log(this.$store.state.sectorTypes)\r\n          });\r\n    },\r\n    getSectorsByCameraIDFromDB() {\r\n      fetch(`http://localhost:5000/getSectorsByCameraID?id=${this.camera.id}`, {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log('preload')\r\n            // let preloaderEl = document.getElementById('preloaded')\r\n            // preloaderEl.classList.add('hidden');\r\n            console.log('sectors ')\r\n            console.log(response[0])\r\n            this.$store.state.sectors = response\r\n            console.log(this.$store.state.sectors)\r\n          });\r\n    },\r\n    getCamerasFromDB() {\r\n      fetch('http://localhost:5000/getCameras', {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log(response)\r\n            this.$store.state.cameras = response\r\n          });\r\n    },\r\n    setSector(sector){\r\n      console.log('sector ' + sector)\r\n      let returnedSector = fetch('http://localhost:5000/setSector', {\r\n        method: 'POST',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"camId\": sector.camId,\r\n          \"id\": sector.id,\r\n          \"name\": sector.name,\r\n          \"points\": sector.points,\r\n          \"roomId\": sector.roomId,\r\n          \"typeId\": sector.typeId\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) =>{\r\n            console.log(response)\r\n            sector.id = response.id\r\n            return sector\r\n          })\r\n      return returnedSector\r\n    },\r\n    setCamera() {\r\n      fetch('http://localhost:5000/setCamera', {\r\n        method: 'POST',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"chanel\": this.camera.chanel,\r\n          \"codec\": this.camera.codec,\r\n          \"id\": this.camera.id,\r\n          \"ip\": this.camera.ip,\r\n          \"login\": this.camera.login,\r\n          \"name\": this.camera.name,\r\n          \"password\": this.camera.password\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            this.camera.id = response.id\r\n            let cameraCopy = Object.assign({}, this.camera)\r\n            console.log('check')\r\n            if (this.getCameraByID(cameraCopy.id) === undefined) {\r\n              this.addCamera(cameraCopy)\r\n              console.log('yesCheck')\r\n            }\r\n            console.log('noCheck')\r\n            this.getSectors.forEach((sector) => {\r\n              sector.camId = this.camera.id\r\n                this.setSector(sector)\r\n            })\r\n          });\r\n    },\r\n    save() {\r\n      this.v$.camera.$touch()\r\n      if (!this.v$.camera.$error) {\r\n        console.log('Валидация прошла успешно')\r\n        this.setCamera()\r\n      }\r\n      else console.log('Валидация не прошла')\r\n    },\r\n    endDraw() {\r\n      this.ctx.lineTo(this.sector.points[0][0], this.sector.points[0][1])\r\n      this.ctx.stroke()\r\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\"\r\n      this.ctx.fill()\r\n      this.drawClicks = 0\r\n    },\r\n    drawLine(x, y){\r\n      if (this.sectorSelected){\r\n        let targetCoords = document.getElementById('canvas').getBoundingClientRect()\r\n        let newX = x - targetCoords.left\r\n        let newY = y - targetCoords.top\r\n        console.log(`x: ${x} y: ${y} newX: ${newX} newY: ${newY} left: ${targetCoords.left} right: ${targetCoords.top}`)\r\n        if (this.drawClicks === 0) {\r\n          this.ctx.moveTo(newX, newY)\r\n        }\r\n        else this.ctx.lineTo(newX, newY)\r\n        this.sector.points.push([newX, newY])\r\n        this.ctx.arc(newX, newY, 2, 0, Math.PI * 2)\r\n        this.ctx.strokeStyle = \"rgba(255, 230, 0)\"\r\n        this.ctx.lineWidth = 2\r\n        this.ctx.stroke()\r\n        this.drawClicks ++\r\n      }\r\n      else alert(\"Выберите сектор\")\r\n    },\r\n    draw() {\r\n      let canvas = document.getElementById('canvas')\r\n      if (canvas.getContext) {\r\n        console.log('getContext')\r\n        this.ctx = canvas.getContext(\"2d\")\r\n        this.ctx.beginPath()\r\n        // this.drawImage()\r\n      }\r\n    },\r\n    removeSectorPoints(){\r\n      this.ctx.clearRect(0, 0, 300, 300)\r\n      this.sector.points = []\r\n      // this.drawImage();\r\n      this.ctx.beginPath()\r\n    },\r\n    drawClear() {\r\n      this.ctx.clearRect(0, 0, 300, 300)\r\n      this.ctx.beginPath()\r\n    },\r\n    drawImage() {\r\n      let img = document.getElementById('putImage')\r\n      img\r\n      console.log(img)\r\n      this.ctx.drawImage(img, 0, 0, 779, 584, 0, 0, 300, 300)\r\n    },\r\n    drawSectorPoints() {\r\n      console.log('drawSectorPoints')\r\n      // this.drawImage()\r\n      let points = this.sector.points\r\n      this.ctx.moveTo(points[0][0], points[0][1])\r\n      this.ctx.arc(points[0][0], points[0][1], 2, 0, Math.PI * 2)\r\n      for (let i = 1; i < points.length; i++){\r\n        this.ctx.lineTo(points[i][0], points[i][1])\r\n        this.ctx.arc(points[i][0], points[i][1], 2, 0, Math.PI * 2)\r\n      }\r\n      this.ctx.lineTo(points[0][0], points[0][1])\r\n      this.ctx.strokeStyle = \"rgba(255, 230, 0)\"\r\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\"\r\n      this.ctx.lineWidth = 2\r\n      this.ctx.stroke()\r\n      this.ctx.fill()\r\n      //\r\n    },\r\n    chooseCamera(camera) {\r\n      console.log(camera.id)\r\n      this.camera = this.getCameraByID(camera.id)\r\n      this.getSectorsByCameraIDFromDB()\r\n      this.cameraSelected = true\r\n      this.resetSector()\r\n    },\r\n    chooseSector(sector) {\r\n      if (this.sector.id === sector.id && sector.id !== null) {\r\n        console.log(this.sector.id + ' ' + sector.id + ' resetSec')\r\n        this.resetSector()\r\n      }\r\n      else if (sector.name === '' || sector.typeId === null) alert(\"Сначала введите название сектора и выберите его тип\")\r\n      else if (sector.id === null) {\r\n        let p1 = this.setSector(sector)\r\n        p1.then(value => {\r\n          console.log(value.id)\r\n          this.showSector(value)\r\n        })\r\n      }\r\n      else this.showSector(sector)\r\n    },\r\n    showSector(sector) {\r\n      if (sector.id !== null) {\r\n        this.sector = this.getSectorByID(sector.id)\r\n        this.sectorSelected = true\r\n        this.drawClear()\r\n        // this.drawImage()\r\n        if (this.sector.points.length !== 0) {\r\n          this.drawSectorPoints()\r\n        }\r\n      }\r\n    },\r\n    resetCamera(){\r\n      console.log('reset')\r\n      this.$store.state.sectors = []\r\n      let cameraCopy = Object.assign({}, this.camera)\r\n      this.camera = cameraCopy\r\n      this.camera.id = null\r\n      this.camera.roomID = null\r\n      this.camera.name = ''\r\n      this.camera.ip = ''\r\n      this.camera.codec = ''\r\n      this.camera.chanel = ''\r\n      this.camera.login = ''\r\n      this.camera.password = ''\r\n      this.cameraSelected = false\r\n      this.v$.camera.$reset()\r\n      this.resetSector()\r\n      this.drawClear()\r\n    },\r\n    resetSector() {\r\n      this.drawClear()\r\n      let sectorCopy = Object.assign({}, this.sector)\r\n      this.sector = sectorCopy\r\n      this.sector.camId = null\r\n      this.sector.id = null\r\n      this.sector.name = ''\r\n      this.sector.points = []\r\n      this.sector.roomId = null\r\n      this.sector.typeId = null\r\n      this.sectorSelected = false\r\n    },\r\n    addSectorToCamera() {\r\n      console.log('p')\r\n      this.resetSector()\r\n      this.sector.camId = this.camera.id\r\n      this.$store.commit('setSector', Object.assign({}, this.sector))\r\n    },\r\n    ...mapActions([\r\n        'addCamera',\r\n        'removeCamera',\r\n        'removeSector'\r\n    ])\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ncanvas {\r\n  border: 1px solid black;\r\n  background: none;\r\n}\r\n#preloaded {\r\n  position: inherit;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 999;\r\n  width: 100%;\r\n  height: 30%;\r\n  overflow: visible;\r\n  background: #fbfbfb url('//cdnjs.cloudflare.com/ajax/libs/file-uploader/3.7.0/processing.gif') no-repeat center center;\r\n}\r\n.hidden{\r\n  visibility: hidden;\r\n  opacity: 0;\r\n}\r\n.visible{\r\n  visibility: visible;\r\n  opacity: 1;\r\n}\r\n.window{\r\n  box-shadow: 0 3px 4px rgba(0,0,0,.25);\r\n  border-radius: 10px ;\r\n}\r\n.input-field{\r\n  outline: none;\r\n  width: 200px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.input-field-sector{\r\n  outline: none;\r\n  width: 150px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.camera:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n.cam-name{\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  margin: 7px;\r\n}\r\n.cam-ip{\r\n  font-size: 12px;\r\n  font-weight: 300;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 30px;\r\n  margin-top: 10px;\r\n}\r\n.add{\r\n  width: 110px;\r\n  /*height: 35px;*/\r\n  position: absolute;\r\n  right: 0;\r\n  /*top: 0;*/\r\n  margin-right: 30px;\r\n  border-radius: 10px;\r\n  font-size: 18px;\r\n}\r\n.add:hover{\r\n  background-color: #dadada;\r\n}\r\n.field {\r\n  font-size: 22px;\r\n  font-weight: 700;\r\n}\r\n.hidden-button{\r\n  background: inherit;\r\n  border: none;\r\n  width: 25px;\r\n  /*vertical-align: center;*/\r\n}\r\n.hidden-button:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}