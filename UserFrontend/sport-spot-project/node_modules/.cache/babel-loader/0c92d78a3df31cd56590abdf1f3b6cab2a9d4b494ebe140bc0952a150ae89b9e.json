{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport { mapActions } from 'vuex';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, integer } from '@vuelidate/validators';\nexport default {\n  name: \"CamerasPage\",\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      camera: {\n        id: null,\n        roomID: -1,\n        name: '',\n        ip: '',\n        chanel: '',\n        codec: '',\n        login: '',\n        password: ''\n      },\n      sector: {\n        camId: null,\n        id: null,\n        name: '',\n        points: [],\n        roomId: null,\n        typeId: null\n      },\n      cameraSelected: false\n    };\n  },\n  validations: {\n    camera: {\n      name: {\n        required\n      },\n      ip: {\n        required\n      },\n      chanel: {\n        required,\n        integer\n      },\n      codec: {\n        required\n      },\n      login: {\n        required\n      },\n      password: {\n        required\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['getCameras', 'getCameraByID', 'getSectorTypes', 'getCameraIndex', 'getSectorsByCameraID', 'getSectors'])\n  },\n  mounted() {\n    if (this.getCameras.length === 0) {\n      this.getCamerasFromDB();\n    }\n    if (this.getSectorTypes.length === 0) {\n      this.getSectorTypesFromDB();\n    }\n  },\n  methods: {\n    getSectorTypesFromDB() {\n      fetch(`http://localhost:5000/getSectorTypes`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        console.log('sectorTypes ');\n        this.$store.state.sectorTypes = response;\n        console.log(this.$store.state.sectorTypes);\n      });\n    },\n    getSectorsByCameraIDFromDB() {\n      fetch(`http://localhost:5000/getSectorsByCameraID?id=${this.camera.id}`, {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        console.log('sectors ');\n        console.log(response[0]);\n        this.$store.state.sectors = response;\n        console.log(this.$store.state.sectors);\n      });\n    },\n    getCamerasFromDB() {\n      fetch('http://localhost:5000/getCameras', {\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.$store.state.cameras = response;\n      });\n    },\n    setSector(sector) {\n      console.log(sector);\n      fetch('http://localhost:5000/setSector', {\n        method: 'POST',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          \"camId\": sector.camId,\n          \"id\": sector.id,\n          \"name\": sector.name,\n          \"points\": sector.points,\n          \"roomId\": sector.roomId,\n          \"typeId\": sector.typeId\n        })\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        sector.id = response.id;\n      });\n    },\n    setCamera(selectedId) {\n      fetch('http://localhost:5000/setCamera', {\n        method: 'POST',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          \"chanel\": this.camera.chanel,\n          \"codec\": this.camera.codec,\n          \"id\": selectedId,\n          \"ip\": this.camera.ip,\n          \"login\": this.camera.login,\n          \"name\": this.camera.name,\n          \"password\": this.camera.password\n        })\n      }).then(response => response.json()).then(response => {\n        this.camera.id = response.id;\n        let cameraCopy = Object.assign({}, this.camera);\n        if (this.getCameraByID(cameraCopy.id) === undefined) {\n          this.addCamera(cameraCopy);\n        }\n        this.getSectors.forEach(sector => this.setSector(sector));\n      });\n    },\n    save() {\n      this.v$.camera.$touch();\n      if (!this.v$.camera.$error) {\n        console.log('Валидация прошла успешно');\n        // if(this.cameraSelected) this.setCamera(this.camera.id)\n        // else this.setCamera(null)\n      } else console.log('Валидация не прошла');\n    },\n    chooseCamera(camera) {\n      console.log(camera.id);\n      this.camera = this.getCameraByID(camera.id);\n      this.getSectorsByCameraIDFromDB();\n      this.cameraSelected = true;\n    },\n    resetCamera() {\n      console.log('reset');\n      this.v$.camera.$reset();\n      let cameraCopy = Object.assign({}, this.camera);\n      // let sectorsCopy = Object.assign({}, this.camera.sectors)\n      // cameraCopy.sectors = sectorsCopy\n      this.camera = cameraCopy;\n      this.camera.id = -1;\n      this.camera.roomID = -1;\n      this.camera.name = '';\n      this.camera.ip = '';\n      this.camera.codec = '';\n      this.camera.chanel = '';\n      this.camera.login = '';\n      this.camera.password = '';\n      // this.camera.sectors = []\n      this.cameraSelected = false;\n      this.v$.camera.$reset();\n      // this.sector.name = ''\n      // this.sector.type = ''\n      // this.sector.id = -1\n    },\n\n    addSectorToCamera() {\n      console.log('p');\n      this.sector.camId = this.camera.id;\n      this.$store.commit('setSector', this.sector);\n    },\n    ...mapActions(['addCamera', 'removeCamera'])\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","useVuelidate","required","integer","name","setup","v$","data","camera","id","roomID","ip","chanel","codec","login","password","sector","camId","points","roomId","typeId","cameraSelected","validations","computed","mounted","getCameras","length","getCamerasFromDB","getSectorTypes","getSectorTypesFromDB","methods","fetch","method","cors","headers","then","response","json","console","log","$store","state","sectorTypes","getSectorsByCameraIDFromDB","sectors","cameras","setSector","body","JSON","stringify","setCamera","selectedId","cameraCopy","Object","assign","getCameraByID","undefined","addCamera","getSectors","forEach","save","$touch","$error","chooseCamera","resetCamera","$reset","addSectorToCamera","commit"],"sources":["D:\\GitHub\\SportSpot\\UserFrontend\\sport-spot-project\\src\\components\\CamerasPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container\" >\r\n      <div class=\"row justify-content-around\">\r\n        <div class=\"col-3\">\r\n            <div class=\"row\">\r\n              <label class=\"field\">Камеры</label>\r\n              <button class=\"add\" style=\"margin-top: 5px\" @click=\"resetCamera\">Добавить</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n          <label class=\"field\">Настройка</label>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <label class=\"field\">Просмотр</label>\r\n        </div>\r\n        <div class=\"col-3\" >\r\n          <div class=\"row window camera col-12\" @click=\"chooseCamera(camera)\" v-for=\"(camera, index) in getCameras\"\r\n               :key=\"index\">\r\n              <span class=\"cam-name\">{{camera.name}}</span>\r\n              <span class=\"cam-ip\">{{camera.ip}}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-4 window\">\r\n          <label style=\"font-weight: 700; margin-top: 10px\">Изображение</label>\r\n          <form @submit.prevent=\"save\" style=\"margin-top: 10px\">\r\n            <div class=\"\">\r\n              <label> Название: </label>\r\n              <input class=\" input-field\" type=\"text\" v-model.trim=\"camera.name\"\r\n                     :class=\"v$.camera.name.$error ? 'is-invalid' : ''\" >\r\n              <p v-if=\"v$.camera.name.$dirty && v$.camera.name.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> ip: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.ip\"\r\n                     :class=\"v$.camera.ip.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.ip.$dirty && v$.camera.ip.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Канал: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.chanel\"\r\n                     :class=\"v$.camera.chanel.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.integer.$invalid \" class=\"invalid-feedback\">\r\n                Канал должен быть числом\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Кодек: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.codec\"\r\n                     :class=\"v$.camera.codec.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.codec.$dirty && v$.camera.codec.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Логин: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.login\"\r\n                     :class=\"v$.camera.login.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.login.$dirty && v$.camera.login.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Пароль: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.password\"\r\n                     :class=\"v$.camera.password.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.password.$dirty && v$.camera.password.required.$invalid \" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div style=\"width: 50px; margin-bottom: 10px\">\r\n                <button type=\"submit\" class=\"btn btn-success\" >Сохранить</button>\r\n              </div>\r\n          </form>\r\n          <button\r\n              class=\"btn btn-primary\"\r\n              @click=\"removeCamera(camera.id); resetCamera()\"\r\n              style=\"position: absolute; bottom: 0; right: 0; margin-right: 15px; margin-bottom: 240px\">\r\n            Удалить\r\n          </button>\r\n          <label style=\"font-weight: 700\">Сектора</label>\r\n\r\n          <button style=\"position: absolute; right: 0; margin-right: 30px\" @click=\"addSectorToCamera\">Добавить</button>\r\n          <div class=\"\" v-for=\"(cameraSector, index) in getSectorsByCameraID(this.camera.id)\" :key=\"index\">\r\n            <input class=\"input-field-sector\" type=\"text\" v-model.trim=\"cameraSector.name\" placeholder=\"Название\">\r\n            <select v-model=\"cameraSector.typeId\">\r\n              <option v-for=\"(sectorType, index) in getSectorTypes\" :value=\"sectorType.id\" :key=\"index\">\r\n                {{sectorType.name}}\r\n              </option>\r\n            </select>\r\n          </div>\r\n          <br>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <div class=\"col-12 window\">\r\n            <p>Изображение</p>\r\n<!--            <img src=\"http://localhost:5000/videoStream\" style=\"width: 100%\">-->\r\n            <img :src=\"require('../assets/images/img1.png')\" style=\"width: 100%\" alt=\"img1\">\r\n<!--            <p>Информация сектора</p>-->\r\n            <p>Сектор</p>\r\n            <span>Техническая информация:</span>\r\n            <ul>\r\n              <li>Границы:</li>\r\n              <li>Высота от пола:</li>\r\n<!--              <li>Тип сектора: <span v-if=\"cameraSelected\">{{camera.sectors.type}}</span></li>-->\r\n            </ul>\r\n            <p>Справка:</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from 'vuex'\r\nimport {mapActions} from 'vuex'\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, integer} from '@vuelidate/validators'\r\n\r\nexport default {\r\n  name: \"CamerasPage\",\r\n  setup () {\r\n    return {\r\n      v$: useVuelidate()\r\n    }\r\n  },\r\n  data(){\r\n    return {\r\n      camera: {\r\n        id : null,\r\n        roomID: -1,\r\n        name: '',\r\n        ip: '',\r\n        chanel : '',\r\n        codec : '',\r\n        login : '',\r\n        password : '',\r\n      },\r\n      sector: {\r\n        camId: null,\r\n        id: null,\r\n        name: '',\r\n        points: [],\r\n        roomId: null,\r\n        typeId: null,\r\n      },\r\n      cameraSelected: false\r\n    }\r\n  },\r\n  validations: {\r\n    camera: {\r\n      name: {required},\r\n      ip: {required},\r\n      chanel: {required, integer},\r\n      codec: {required},\r\n      login: { required },\r\n      password: {required},\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n        'getCameras',\r\n        'getCameraByID',\r\n        'getSectorTypes',\r\n        'getCameraIndex',\r\n        'getSectorsByCameraID',\r\n        'getSectors'\r\n    ])\r\n  },\r\n  mounted() {\r\n    if (this.getCameras.length === 0){\r\n      this.getCamerasFromDB()\r\n    }\r\n    if (this.getSectorTypes.length === 0){\r\n      this.getSectorTypesFromDB()\r\n    }\r\n  },\r\n  methods: {\r\n    getSectorTypesFromDB() {\r\n      fetch(`http://localhost:5000/getSectorTypes`, {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log('sectorTypes ')\r\n            this.$store.state.sectorTypes = response\r\n            console.log(this.$store.state.sectorTypes)\r\n          });\r\n    },\r\n    getSectorsByCameraIDFromDB() {\r\n      fetch(`http://localhost:5000/getSectorsByCameraID?id=${this.camera.id}`, {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log('sectors ')\r\n            console.log(response[0])\r\n            this.$store.state.sectors = response\r\n            console.log(this.$store.state.sectors)\r\n          });\r\n    },\r\n    getCamerasFromDB() {\r\n      fetch('http://localhost:5000/getCameras', {\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log(response)\r\n            this.$store.state.cameras = response\r\n          });\r\n    },\r\n    setSector(sector){\r\n      console.log(sector)\r\n      fetch('http://localhost:5000/setSector', {\r\n        method: 'POST',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"camId\": sector.camId,\r\n          \"id\": sector.id,\r\n          \"name\": sector.name,\r\n          \"points\": sector.points,\r\n          \"roomId\": sector.roomId,\r\n          \"typeId\": sector.typeId\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) =>{\r\n            console.log(response)\r\n            sector.id = response.id\r\n          })\r\n    },\r\n    setCamera(selectedId) {\r\n      fetch('http://localhost:5000/setCamera', {\r\n        method: 'POST',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"chanel\": this.camera.chanel,\r\n          \"codec\": this.camera.codec,\r\n          \"id\": selectedId,\r\n          \"ip\": this.camera.ip,\r\n          \"login\": this.camera.login,\r\n          \"name\": this.camera.name,\r\n          \"password\": this.camera.password\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            this.camera.id = response.id\r\n            let cameraCopy = Object.assign({}, this.camera)\r\n            if (this.getCameraByID(cameraCopy.id) === undefined) {\r\n              this.addCamera(cameraCopy)\r\n            }\r\n            this.getSectors.forEach((sector) => this.setSector(sector))\r\n          });\r\n    },\r\n    save() {\r\n      this.v$.camera.$touch()\r\n      if (!this.v$.camera.$error) {\r\n        console.log('Валидация прошла успешно')\r\n        // if(this.cameraSelected) this.setCamera(this.camera.id)\r\n        // else this.setCamera(null)\r\n      }\r\n      else console.log('Валидация не прошла')\r\n    },\r\n    chooseCamera(camera) {\r\n      console.log(camera.id)\r\n      this.camera = this.getCameraByID(camera.id)\r\n      this.getSectorsByCameraIDFromDB()\r\n      this.cameraSelected = true\r\n    },\r\n    resetCamera(){\r\n      console.log('reset')\r\n      this.v$.camera.$reset()\r\n      let cameraCopy = Object.assign({}, this.camera)\r\n      // let sectorsCopy = Object.assign({}, this.camera.sectors)\r\n      // cameraCopy.sectors = sectorsCopy\r\n      this.camera = cameraCopy\r\n      this.camera.id = -1\r\n      this.camera.roomID = -1\r\n      this.camera.name = ''\r\n      this.camera.ip = ''\r\n      this.camera.codec = ''\r\n      this.camera.chanel = ''\r\n      this.camera.login = ''\r\n      this.camera.password = ''\r\n      // this.camera.sectors = []\r\n      this.cameraSelected = false\r\n      this.v$.camera.$reset()\r\n      // this.sector.name = ''\r\n      // this.sector.type = ''\r\n      // this.sector.id = -1\r\n    },\r\n    addSectorToCamera() {\r\n      console.log('p')\r\n      this.sector.camId = this.camera.id\r\n      this.$store.commit('setSector', this.sector)\r\n    },\r\n    ...mapActions([\r\n        'addCamera',\r\n        'removeCamera'\r\n    ])\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.window{\r\n  box-shadow: 0 3px 4px rgba(0,0,0,.25);\r\n  border-radius: 10px ;\r\n}\r\n.input-field{\r\n  outline: none;\r\n  width: 200px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.input-field-sector{\r\n  outline: none;\r\n  width: 150px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.camera:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n.cam-name{\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  margin: 7px;\r\n}\r\n.cam-ip{\r\n  font-size: 12px;\r\n  font-weight: 300;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 30px;\r\n  margin-top: 10px;\r\n}\r\n.add{\r\n  width: 110px;\r\n  /*height: 35px;*/\r\n  position: absolute;\r\n  right: 0;\r\n  /*top: 0;*/\r\n  margin-right: 30px;\r\n  border-radius: 10px;\r\n  font-size: 18px;\r\n}\r\n.add:hover{\r\n  background-color: #dadada;\r\n}\r\n.field {\r\n  font-size: 22px;\r\n  font-weight: 700;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}