{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { mapGetters } from 'vuex';\nimport { mapActions } from 'vuex';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, integer } from '@vuelidate/validators';\nexport default {\n  name: \"CamerasPage\",\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      ctx: null,\n      drawClicks: 0,\n      imgPath: '',\n      camera: {\n        id: null,\n        roomID: null,\n        name: '',\n        ip: '',\n        port: '',\n        chanel: '',\n        codec: '',\n        login: '',\n        password: '',\n        fullRoute: ''\n      },\n      sector: {\n        camId: null,\n        id: null,\n        name: '',\n        points: [],\n        roomId: null,\n        typeId: null\n      },\n      cameraSelected: false,\n      sectorSelected: false\n    };\n  },\n  validations: {\n    camera: {\n      name: {\n        required\n      },\n      ip: {\n        required\n      },\n      port: {\n        required,\n        integer\n      },\n      chanel: {\n        required,\n        integer\n      },\n      codec: {\n        required\n      },\n      login: {\n        required\n      },\n      password: {\n        required\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['getCameras', 'getCameraByID', 'getSectorTypes', 'getSectorsByCameraID', 'getSectors', 'getSectorByID', 'getSectorTypeByID', 'getRefreshInterval'])\n  },\n  mounted() {\n    console.log('mountedCameras');\n    if (this.getCameras.length === 0) {\n      this.selectFunction(this.getCamerasFromDB);\n    }\n    if (this.getSectorTypes.length === 0) {\n      this.selectFunction(this.getSectorTypesFromDB);\n    }\n    this.draw();\n  },\n  methods: {\n    getSectorTypesFromDB() {\n      let returnResult;\n      fetch(`http://localhost:5000/getSectorTypes`, {\n        credentials: \"include\",\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        returnResult = response;\n        console.log('sectorTypes ');\n        this.$store.state.sectorTypes = response;\n        console.log(this.$store.state.sectorTypes);\n      });\n      return returnResult;\n    },\n    getSectorsByCameraIDFromDB() {\n      let returnResult;\n      fetch(`http://localhost:5000/getSectorsByCameraID?id=${this.camera.id}`, {\n        credentials: \"include\",\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        returnResult = response;\n        console.log('preload');\n        // let preloaderEl = document.getElementById('preloaded')\n        // preloaderEl.classList.add('hidden');\n        console.log('sectors ');\n        console.log(response[0]);\n        this.$store.state.sectors = response;\n        console.log(this.$store.state.sectors);\n      });\n      return returnResult;\n    },\n    getCamerasFromDB() {\n      let returnResult;\n      fetch('http://localhost:5000/getCameras', {\n        credentials: \"include\",\n        // fetch('http://localhost:5000/testJWT', {\n        method: 'GET',\n        // credentials: \"include\",\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n          // 'Access-Control-Allow-Origin': 'http://192.168.169.32:5000',\n          // 'Access-Control-Allow-Credentials': 'true',\n        }\n      }).then(response => response.json()).then(response => {\n        returnResult = response;\n        console.log(response);\n        this.$store.state.cameras = response;\n      });\n      return returnResult;\n    },\n    setSector(sector) {\n      console.log('sector ' + sector);\n      return fetch('http://localhost:5000/setSector', {\n        credentials: \"include\",\n        method: 'POST',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          \"camId\": sector.camId,\n          \"id\": sector.id,\n          \"name\": sector.name,\n          \"points\": sector.points,\n          \"roomId\": sector.roomId,\n          \"typeId\": sector.typeId\n        })\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        sector.id = response.id;\n        // sector.id === null ? console.log('nulz') : console.log('nenulz')\n        if (sector.id === null) return response;else return sector;\n      });\n      // console.log('\\nsectorDDDD ' + returnResult)\n    },\n\n    setCamera() {\n      return fetch('http://localhost:5000/setCamera', {\n        credentials: \"include\",\n        method: 'POST',\n        // cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          \"chanel\": this.camera.chanel,\n          \"codec\": this.camera.codec,\n          \"id\": this.camera.id,\n          \"ip\": this.camera.ip,\n          \"port\": this.camera.port,\n          \"login\": this.camera.login,\n          \"name\": this.camera.name,\n          \"password\": this.camera.password,\n          \"fullRoute\": this.camera.fullRoute\n        })\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.camera.id = response.id;\n        let cameraCopy = Object.assign({}, this.camera);\n        console.log('check');\n        if (this.getCameraByID(cameraCopy.id) === undefined) {\n          this.addCamera(cameraCopy);\n          console.log('yesCheck');\n        }\n        console.log('noCheck');\n        this.getSectors.forEach(sector => {\n          sector.camId = this.camera.id;\n          this.selectFunction(this.setSector, sector);\n        });\n        return response;\n      });\n    },\n    save() {\n      this.v$.camera.$touch();\n      if (!this.v$.camera.$error) {\n        console.log('Валидация прошла успешно');\n        this.selectFunction(this.setCamera);\n      } else console.log('Валидация не прошла');\n    },\n    endDraw() {\n      this.ctx.lineTo(this.sector.points[0][0], this.sector.points[0][1]);\n      this.ctx.stroke();\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\";\n      this.ctx.fill();\n      this.drawClicks = 0;\n    },\n    drawLine(x, y) {\n      if (this.sectorSelected) {\n        let targetCoords = document.getElementById('canvas').getBoundingClientRect();\n        let newX = x - targetCoords.left;\n        let newY = y - targetCoords.top;\n        console.log(`x: ${x} y: ${y} newX: ${newX} newY: ${newY} left: ${targetCoords.left} right: ${targetCoords.top}`);\n        if (this.drawClicks === 0) {\n          this.ctx.moveTo(newX, newY);\n        } else this.ctx.lineTo(newX, newY);\n        this.sector.points.push([newX, newY]);\n        this.ctx.arc(newX, newY, 2, 0, Math.PI * 2);\n        this.ctx.strokeStyle = \"rgba(255, 230, 0)\";\n        this.ctx.lineWidth = 2;\n        this.ctx.stroke();\n        this.drawClicks++;\n      } else alert(\"Выберите сектор\");\n    },\n    draw() {\n      let canvas = document.getElementById('canvas');\n      if (canvas.getContext) {\n        console.log('getContext');\n        this.ctx = canvas.getContext(\"2d\");\n        this.ctx.beginPath();\n      }\n    },\n    removeSectorPoints() {\n      this.ctx.clearRect(0, 0, 300, 300);\n      this.sector.points = [];\n      this.ctx.beginPath();\n    },\n    drawClear() {\n      this.ctx.clearRect(0, 0, 300, 300);\n      this.ctx.beginPath();\n    },\n    drawSectorPoints() {\n      console.log('drawSectorPoints');\n      let points = this.sector.points;\n      this.ctx.moveTo(points[0][0], points[0][1]);\n      this.ctx.arc(points[0][0], points[0][1], 2, 0, Math.PI * 2);\n      for (let i = 1; i < points.length; i++) {\n        this.ctx.lineTo(points[i][0], points[i][1]);\n        this.ctx.arc(points[i][0], points[i][1], 2, 0, Math.PI * 2);\n      }\n      this.ctx.lineTo(points[0][0], points[0][1]);\n      this.ctx.strokeStyle = \"rgba(255, 230, 0)\";\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\";\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n      this.ctx.fill();\n      //\n    },\n\n    fetchImage() {\n      fetch(`http://localhost:5000/getVideo?camId=${this.camera.id}`, {\n        method: 'GET'\n      }).then(response => response.blob()).then(response => {\n        console.log('blob');\n        let imageUrl = URL.createObjectURL(response);\n        let imageEl = document.createElement(\"img\");\n        imageEl.src = imageUrl;\n        imageEl.id = \"newCam\";\n        console.log(imageEl);\n        let div = document.getElementById(\"camDiv\");\n        // div.removeChild(document.getElementById(\"camImg\"))\n        div.appendChild(imageEl);\n      });\n    },\n    drawImage() {\n      console.log('drawImage');\n\n      // let img = new Image()\n      // img.onload = function (){\n      //   img.id = \"camImg\"\n      //   img.style = \"width: 100%; height: 100%\"\n      //   document.getElementById(\"camImg\").src = img.src\n      //   // let div = document.getElementById(\"camDiv\")\n      //   // div.removeChild(document.getElementById(\"camImg\"))\n      //   // div.appendChild(img)\n      // }\n      // img.src = `http://localhost:5000/getVideo?camId=${this.camera.id}#t=` + new Date().getTime()\n      // this.imgPath = `http://localhost:5000/getVideo?camId=${this.camera.id}`\n      // this.fetchImage()\n      let iframe = document.getElementById(\"iframe\");\n      let canvas = document.getElementById('canvas');\n      iframe.style.setProperty('--width', iframe.width);\n      iframe.style.setProperty('--height', iframe.height);\n      iframe.style.setProperty('--x');\n      this.imgPath = `http://localhost:5000/getVideo?camId=${this.camera.id}`;\n      let interval = this.getRefreshInterval;\n      if (interval) {\n        console.log('clean');\n        this.$store.commit('clearRefreshInterval');\n      }\n      interval = setInterval(() => this.selectFunction(this.refreshVideo), 5000);\n      this.$store.commit('setRefreshInterval', interval);\n    },\n    refreshVideo() {\n      let returnResult;\n      fetch(`http://localhost:5000/refreshVideo?camId=${this.camera.id}`, {\n        credentials: \"include\",\n        method: 'GET',\n        cors: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => response.json()).then(response => {\n        returnResult = response;\n        console.log(response);\n        if (response.answer === \"Stream is finished\") {\n          // fetch(`http://localhost:5000/getVideo?camId=${this.camera.id}`)\n          // .then(this.drawImage)\n        }\n      });\n      return returnResult;\n    },\n    chooseCamera(camera) {\n      this.resetCamera();\n      console.log(camera.id);\n      this.camera = this.getCameraByID(camera.id);\n      this.selectFunction(this.getSectorsByCameraIDFromDB);\n      this.cameraSelected = true;\n      this.drawImage();\n      this.resetSector();\n    },\n    chooseSector(sector) {\n      if (this.sector.id === sector.id && sector.id !== null) {\n        console.log(this.sector.id + ' ' + sector.id + ' resetSec');\n        this.resetSector();\n      } else if (sector.name === '' || sector.typeId === null) alert(\"Сначала введите название сектора и выберите его тип\");else if (sector.id === null) {\n        let p1 = this.selectFunction(this.setSector, sector);\n        p1.then(value => {\n          console.log(value.id);\n          this.showSector(value);\n        });\n      } else this.showSector(sector);\n    },\n    showSector(sector) {\n      if (sector.id !== null) {\n        this.sector = this.getSectorByID(sector.id);\n        this.sectorSelected = true;\n        this.drawClear();\n        if (this.sector.points.length !== 0) {\n          this.drawSectorPoints();\n        }\n      }\n    },\n    resetCamera() {\n      this.imgPath = '@/assets/images/background.png';\n      // document.getElementById(\"camImg\").setAttribute(\"src\", '@/assets/images/background.png')\n      console.log('reset');\n      this.$store.state.sectors = [];\n      let cameraCopy = Object.assign({}, this.camera);\n      this.camera = cameraCopy;\n      this.camera.id = null;\n      this.camera.roomID = null;\n      this.camera.name = '';\n      this.camera.ip = '';\n      this.camera.codec = '';\n      this.camera.port = '';\n      this.camera.chanel = '';\n      this.camera.login = '';\n      this.camera.password = '';\n      this.camera.fullRoute = '';\n      this.cameraSelected = false;\n      this.v$.camera.$reset();\n      this.resetSector();\n      this.drawClear();\n      if (this.getRefreshInterval) {\n        console.log('clean');\n        this.$store.commit('clearRefreshInterval');\n      }\n    },\n    resetSector() {\n      this.drawClear();\n      let sectorCopy = Object.assign({}, this.sector);\n      this.sector = sectorCopy;\n      this.sector.camId = null;\n      this.sector.id = null;\n      this.sector.name = '';\n      this.sector.points = [];\n      this.sector.roomId = null;\n      this.sector.typeId = null;\n      this.sectorSelected = false;\n    },\n    addSectorToCamera() {\n      console.log('p');\n      this.resetSector();\n      this.sector.camId = this.camera.id;\n      this.$store.commit('setSector', Object.assign({}, this.sector));\n    },\n    selectFunction(func, value) {\n      let respFunc;\n      if (arguments.length === 2) respFunc = func(value);else respFunc = func();\n      let refresh;\n      // console.log('respFunc ' + respFunc)\n      if (respFunc === \"Bad token\") {\n        refresh = this.refreshToken();\n        if (refresh === \"ok\") {\n          // console.log('refreshOk')\n          respFunc = func();\n        }\n        if (respFunc === \"Bad token\") alert('logout pls');\n      } else return respFunc;\n    },\n    ...mapActions(['addCamera', 'removeCamera', 'removeSector', 'refreshToken'])\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","useVuelidate","required","integer","name","setup","v$","data","ctx","drawClicks","imgPath","camera","id","roomID","ip","port","chanel","codec","login","password","fullRoute","sector","camId","points","roomId","typeId","cameraSelected","sectorSelected","validations","computed","mounted","console","log","getCameras","length","selectFunction","getCamerasFromDB","getSectorTypes","getSectorTypesFromDB","draw","methods","returnResult","fetch","credentials","method","cors","headers","then","response","json","$store","state","sectorTypes","getSectorsByCameraIDFromDB","sectors","cameras","setSector","body","JSON","stringify","setCamera","cameraCopy","Object","assign","getCameraByID","undefined","addCamera","getSectors","forEach","save","$touch","$error","endDraw","lineTo","stroke","fillStyle","fill","drawLine","x","y","targetCoords","document","getElementById","getBoundingClientRect","newX","left","newY","top","moveTo","push","arc","Math","PI","strokeStyle","lineWidth","alert","canvas","getContext","beginPath","removeSectorPoints","clearRect","drawClear","drawSectorPoints","i","fetchImage","blob","imageUrl","URL","createObjectURL","imageEl","createElement","src","div","appendChild","drawImage","iframe","style","setProperty","width","height","interval","getRefreshInterval","commit","setInterval","refreshVideo","answer","chooseCamera","resetCamera","resetSector","chooseSector","p1","value","showSector","getSectorByID","$reset","sectorCopy","addSectorToCamera","func","respFunc","arguments","refresh","refreshToken"],"sources":["D:\\GitHub\\SportSpot\\UserFrontend\\sport-spot-project\\src\\components\\CamerasPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container\" >\r\n      <div class=\"row justify-content-around\">\r\n        <div class=\"col-3\">\r\n            <div class=\"row\">\r\n              <label class=\"field\">Камеры</label>\r\n              <button class=\"add\" style=\"margin-top: 5px\" @click=\"resetCamera\">Добавить</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n          <label class=\"field\">Настройка</label>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <label class=\"field\">Просмотр</label>\r\n        </div>\r\n        <div class=\"col-3\" >\r\n          <div class=\"row window camera col-12\" @click=\"chooseCamera(camera)\" v-for=\"(camera, index) in getCameras\"\r\n               :key=\"index\">\r\n              <span class=\"cam-name\">{{camera.name}}</span>\r\n              <span class=\"cam-ip\">{{camera.ip}}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-4 window\">\r\n          <label style=\"font-weight: 700; margin-top: 10px\">Изображение</label>\r\n          <form @submit.prevent=\"save\" style=\"margin-top: 10px\">\r\n            <div class=\"\">\r\n              <label> Название: </label>\r\n              <input class=\" input-field\" type=\"text\" v-model.trim=\"camera.name\"\r\n                     :class=\"v$.camera.name.$error ? 'is-invalid' : ''\" >\r\n              <p v-if=\"v$.camera.name.$dirty && v$.camera.name.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> ip: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.ip\"\r\n                     :class=\"v$.camera.ip.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.ip.$dirty && v$.camera.ip.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Порт: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.port\"\r\n                     :class=\"v$.camera.port.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.port.$dirty && v$.camera.port.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n              <p v-if=\"v$.camera.port.$dirty && v$.camera.port.integer.$invalid \" class=\"invalid-feedback\">\r\n                Значение должно быть числовым\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Канал: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.chanel\"\r\n                     :class=\"v$.camera.chanel.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n              <p v-if=\"v$.camera.chanel.$dirty && v$.camera.chanel.integer.$invalid \" class=\"invalid-feedback\">\r\n                Значение должно быть числовым\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Кодек: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.codec\"\r\n                     :class=\"v$.camera.codec.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.codec.$dirty && v$.camera.codec.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Логин: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.login\"\r\n                     :class=\"v$.camera.login.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.login.$dirty && v$.camera.login.required.$invalid\" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Пароль: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.password\"\r\n                     :class=\"v$.camera.password.$error ? 'is-invalid' : ''\">\r\n              <p v-if=\"v$.camera.password.$dirty && v$.camera.password.required.$invalid \" class=\"invalid-feedback\">\r\n                Обязательное поле\r\n              </p>\r\n            </div>\r\n            <div class=\"\">\r\n              <label> Полный путь: </label>\r\n              <input class=\"input-field\" type=\"text\" v-model.trim=\"camera.fullRoute\">\r\n            </div>\r\n            <div style=\"width: 50px; margin-bottom: 10px\">\r\n                <button type=\"submit\" class=\"btn btn-success\" >Сохранить</button>\r\n              </div>\r\n          </form>\r\n          <button\r\n              class=\"btn btn-primary\"\r\n              @click=\"removeCamera(camera.id); resetCamera()\"\r\n              style=\"position: absolute; top: 0; right: 0; margin-right: 15px; margin-top: 308px\">\r\n            Удалить\r\n          </button>\r\n          <label style=\"font-weight: 700\">Сектора</label>\r\n\r\n          <button style=\"position: absolute; right: 0; margin-right: 30px\" @click=\"addSectorToCamera\">Добавить</button>\r\n          <div v-if=\"getSectors.length === 0\" id=\"preloaded\" class=\"hidden\"></div>\r\n          <div class=\"\" v-for=\"(cameraSector, index) in getSectorsByCameraID(this.camera.id)\" :key=\"index\">\r\n            <input class=\"input-field-sector\" type=\"text\" v-model.trim=\"cameraSector.name\" placeholder=\"Название\">\r\n            <select v-model=\"cameraSector.typeId\">\r\n              <option v-for=\"(sectorType, index) in getSectorTypes\" :value=\"sectorType.id\" :key=\"index\">\r\n                {{sectorType.name}}\r\n              </option>\r\n            </select>\r\n            <button class=\"hidden-button\" @click=\"chooseSector(cameraSector)\" style=\"margin-left: 5px\">\r\n              <img v-if=\"sectorSelected && sector.id === cameraSector.id\" style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/eye-opened.png')\" alt=\"\">\r\n              <img v-else style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/eye-closed.png')\" alt=\"\">\r\n            </button>\r\n            <button class=\"hidden-button\" @click=\"selectFunction(removeSector,cameraSector.id); drawClear()\" style=\"margin-left: 10px\">\r\n              <img style=\"margin-bottom: 5px\" :src=\"require('../assets/icons/delete.png')\" alt=\"\">\r\n            </button>\r\n          </div>\r\n          <br>\r\n        </div>\r\n        <div class=\"col-5\">\r\n          <div class=\"col-12 window\">\r\n            <p>Изображение</p>\r\n            <div id=\"camDiv\" style=\"width: 300px; height: 300px\">\r\n<!--              :src=\"require('')\"-->\r\n<!--              <img id=\"putImage\" :src=\"require('../' + imgPath)\"  style=\"width: 100%; height: 100%\"  alt=\"img1\">-->\r\n<!--              <img-->\r\n<!--                  v-if=\"cameraSelected\"-->\r\n<!--                  id=\"camImg\"-->\r\n<!--                  :src=\"cameraSelected ? imgPath : '' \"-->\r\n<!--                  style=\"width: 100%; height: 100%\"-->\r\n<!--                  alt=\"\">-->\r\n              <iframe\r\n                  id=\"iframe\"\r\n                  class=\"iframe\"\r\n                  v-if=\"cameraSelected\"\r\n                  :src=\"imgPath\"></iframe>\r\n<!--              require('@/assets/images/background.png')-->\r\n<!--              <img v-if=\"cameraSelected\" id=\"camImg\" src=\"\" style=\"width: 100%; height: 100%\" alt=\"\">-->\r\n<!--              :src=\"cameraSelected ? imgPath : require('@/assets/images/background.png') \"-->\r\n              <img v-if=\"!cameraSelected\" :src=\"require('@/assets/images/background.png')\" alt=\"\">\r\n              <canvas\r\n                  @click=\"drawLine($event.clientX, $event.clientY)\"\r\n                  id=\"canvas\"\r\n                  width=\"400\" height=\"300\"\r\n                  style=\"position: absolute; top: 0; left: 0; margin-top: 40px; margin-left: 14px\"\r\n              >\r\n              </canvas>\r\n            </div>\r\n<!--            <a :href=\"'http://localhost:5000/getVideo?camId=' + this.camera.id\">ссылка</a>-->\r\n\r\n            <br>\r\n            <button @click=\"endDraw\">Заполнить область</button>\r\n            <button @click=\"removeSectorPoints\">Очистить всё</button>\r\n            <p>Информация сектора</p>\r\n            <p>Сектор {{sector.name}}</p>\r\n            <span>Техническая информация:</span>\r\n            <ul>\r\n              <li>Границы:</li>\r\n              <li>Высота от пола:</li>\r\n              <li>Тип сектора: <span v-if=\"sectorSelected\">{{getSectorTypeByID(sector.typeId).name}}</span></li>\r\n            </ul>\r\n            <p>Справка:</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from 'vuex'\r\nimport {mapActions} from 'vuex'\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, integer} from '@vuelidate/validators'\r\n\r\nexport default {\r\n  name: \"CamerasPage\",\r\n  setup () {\r\n    return {\r\n      v$: useVuelidate()\r\n    }\r\n  },\r\n  data(){\r\n    return {\r\n      ctx: null,\r\n      drawClicks: 0,\r\n      imgPath: '',\r\n      camera: {\r\n        id : null,\r\n        roomID: null,\r\n        name: '',\r\n        ip: '',\r\n        port: '',\r\n        chanel : '',\r\n        codec : '',\r\n        login : '',\r\n        password : '',\r\n        fullRoute: '',\r\n      },\r\n      sector: {\r\n        camId: null,\r\n        id: null,\r\n        name: '',\r\n        points: [],\r\n        roomId: null,\r\n        typeId: null,\r\n      },\r\n      cameraSelected: false,\r\n      sectorSelected: false\r\n    }\r\n  },\r\n  validations: {\r\n    camera: {\r\n      name: {required},\r\n      ip: {required},\r\n      port: {required, integer},\r\n      chanel: {required, integer},\r\n      codec: {required},\r\n      login: { required },\r\n      password: {required},\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n        'getCameras',\r\n        'getCameraByID',\r\n        'getSectorTypes',\r\n        'getSectorsByCameraID',\r\n        'getSectors',\r\n        'getSectorByID',\r\n        'getSectorTypeByID',\r\n        'getRefreshInterval'\r\n    ])\r\n  },\r\n  mounted() {\r\n    console.log('mountedCameras')\r\n    if (this.getCameras.length === 0){\r\n      this.selectFunction(this.getCamerasFromDB)\r\n    }\r\n    if (this.getSectorTypes.length === 0){\r\n      this.selectFunction(this.getSectorTypesFromDB)\r\n    }\r\n    this.draw()\r\n  },\r\n  methods: {\r\n    getSectorTypesFromDB() {\r\n      let returnResult\r\n      fetch(`http://localhost:5000/getSectorTypes`, {\r\n        credentials: \"include\",\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            returnResult = response\r\n            console.log('sectorTypes ')\r\n            this.$store.state.sectorTypes = response\r\n            console.log(this.$store.state.sectorTypes)\r\n          });\r\n      return returnResult\r\n    },\r\n    getSectorsByCameraIDFromDB() {\r\n      let returnResult\r\n      fetch(`http://localhost:5000/getSectorsByCameraID?id=${this.camera.id}`, {\r\n        credentials: \"include\",\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            returnResult = response\r\n            console.log('preload')\r\n            // let preloaderEl = document.getElementById('preloaded')\r\n            // preloaderEl.classList.add('hidden');\r\n            console.log('sectors ')\r\n            console.log(response[0])\r\n            this.$store.state.sectors = response\r\n            console.log(this.$store.state.sectors)\r\n          });\r\n      return returnResult\r\n    },\r\n    getCamerasFromDB() {\r\n      let returnResult\r\n      fetch('http://localhost:5000/getCameras', {\r\n        credentials: \"include\",\r\n        // fetch('http://localhost:5000/testJWT', {\r\n        method: 'GET',\r\n        // credentials: \"include\",\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n          // 'Access-Control-Allow-Origin': 'http://192.168.169.32:5000',\r\n          // 'Access-Control-Allow-Credentials': 'true',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            returnResult = response\r\n            console.log(response)\r\n            this.$store.state.cameras = response\r\n          });\r\n      return  returnResult\r\n    },\r\n    setSector(sector){\r\n      console.log('sector ' + sector)\r\n      return fetch('http://localhost:5000/setSector', {\r\n        credentials: \"include\",\r\n        method: 'POST',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"camId\": sector.camId,\r\n          \"id\": sector.id,\r\n          \"name\": sector.name,\r\n          \"points\": sector.points,\r\n          \"roomId\": sector.roomId,\r\n          \"typeId\": sector.typeId\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) =>{\r\n            console.log(response)\r\n            sector.id = response.id\r\n            // sector.id === null ? console.log('nulz') : console.log('nenulz')\r\n            if (sector.id === null) return response\r\n            else return sector\r\n          })\r\n      // console.log('\\nsectorDDDD ' + returnResult)\r\n    },\r\n    setCamera() {\r\n      return fetch('http://localhost:5000/setCamera', {\r\n        credentials: \"include\",\r\n        method: 'POST',\r\n        // cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          \"chanel\": this.camera.chanel,\r\n          \"codec\": this.camera.codec,\r\n          \"id\": this.camera.id,\r\n          \"ip\": this.camera.ip,\r\n          \"port\": this.camera.port,\r\n          \"login\": this.camera.login,\r\n          \"name\": this.camera.name,\r\n          \"password\": this.camera.password,\r\n          \"fullRoute\": this.camera.fullRoute\r\n        })\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            console.log(response)\r\n            this.camera.id = response.id\r\n            let cameraCopy = Object.assign({}, this.camera)\r\n            console.log('check')\r\n            if (this.getCameraByID(cameraCopy.id) === undefined) {\r\n              this.addCamera(cameraCopy)\r\n              console.log('yesCheck')\r\n            }\r\n            console.log('noCheck')\r\n            this.getSectors.forEach((sector) => {\r\n              sector.camId = this.camera.id\r\n              this.selectFunction(this.setSector, sector)\r\n            })\r\n            return response\r\n          });\r\n    },\r\n    save() {\r\n      this.v$.camera.$touch()\r\n      if (!this.v$.camera.$error) {\r\n        console.log('Валидация прошла успешно')\r\n        this.selectFunction(this.setCamera)\r\n      }\r\n      else console.log('Валидация не прошла')\r\n    },\r\n    endDraw() {\r\n      this.ctx.lineTo(this.sector.points[0][0], this.sector.points[0][1])\r\n      this.ctx.stroke()\r\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\"\r\n      this.ctx.fill()\r\n      this.drawClicks = 0\r\n    },\r\n    drawLine(x, y){\r\n      if (this.sectorSelected){\r\n        let targetCoords = document.getElementById('canvas').getBoundingClientRect()\r\n        let newX = x - targetCoords.left\r\n        let newY = y - targetCoords.top\r\n        console.log(`x: ${x} y: ${y} newX: ${newX} newY: ${newY} left: ${targetCoords.left} right: ${targetCoords.top}`)\r\n        if (this.drawClicks === 0) {\r\n          this.ctx.moveTo(newX, newY)\r\n        }\r\n        else this.ctx.lineTo(newX, newY)\r\n        this.sector.points.push([newX, newY])\r\n        this.ctx.arc(newX, newY, 2, 0, Math.PI * 2)\r\n        this.ctx.strokeStyle = \"rgba(255, 230, 0)\"\r\n        this.ctx.lineWidth = 2\r\n        this.ctx.stroke()\r\n        this.drawClicks ++\r\n      }\r\n      else alert(\"Выберите сектор\")\r\n    },\r\n    draw() {\r\n      let canvas = document.getElementById('canvas')\r\n      if (canvas.getContext) {\r\n        console.log('getContext')\r\n        this.ctx = canvas.getContext(\"2d\")\r\n        this.ctx.beginPath()\r\n      }\r\n    },\r\n    removeSectorPoints(){\r\n      this.ctx.clearRect(0, 0, 300, 300)\r\n      this.sector.points = []\r\n      this.ctx.beginPath()\r\n    },\r\n    drawClear() {\r\n      this.ctx.clearRect(0, 0, 300, 300)\r\n      this.ctx.beginPath()\r\n    },\r\n    drawSectorPoints() {\r\n      console.log('drawSectorPoints')\r\n      let points = this.sector.points\r\n      this.ctx.moveTo(points[0][0], points[0][1])\r\n      this.ctx.arc(points[0][0], points[0][1], 2, 0, Math.PI * 2)\r\n      for (let i = 1; i < points.length; i++){\r\n        this.ctx.lineTo(points[i][0], points[i][1])\r\n        this.ctx.arc(points[i][0], points[i][1], 2, 0, Math.PI * 2)\r\n      }\r\n      this.ctx.lineTo(points[0][0], points[0][1])\r\n      this.ctx.strokeStyle = \"rgba(255, 230, 0)\"\r\n      this.ctx.fillStyle = \"rgba(255, 230, 0, 0.25)\"\r\n      this.ctx.lineWidth = 2\r\n      this.ctx.stroke()\r\n      this.ctx.fill()\r\n      //\r\n    },\r\n    fetchImage(){\r\n      fetch(`http://localhost:5000/getVideo?camId=${this.camera.id}`, {\r\n        method: 'GET'\r\n      })\r\n      .then(response => response.blob())\r\n      .then((response) => {\r\n        console.log('blob')\r\n        let imageUrl = URL.createObjectURL(response)\r\n        let imageEl = document.createElement(\"img\")\r\n        imageEl.src = imageUrl\r\n        imageEl.id = \"newCam\"\r\n        console.log(imageEl)\r\n        let div = document.getElementById(\"camDiv\")\r\n        // div.removeChild(document.getElementById(\"camImg\"))\r\n        div.appendChild(imageEl)\r\n      })\r\n    },\r\n    drawImage() {\r\n      console.log('drawImage')\r\n\r\n      // let img = new Image()\r\n      // img.onload = function (){\r\n      //   img.id = \"camImg\"\r\n      //   img.style = \"width: 100%; height: 100%\"\r\n      //   document.getElementById(\"camImg\").src = img.src\r\n      //   // let div = document.getElementById(\"camDiv\")\r\n      //   // div.removeChild(document.getElementById(\"camImg\"))\r\n      //   // div.appendChild(img)\r\n      // }\r\n      // img.src = `http://localhost:5000/getVideo?camId=${this.camera.id}#t=` + new Date().getTime()\r\n      // this.imgPath = `http://localhost:5000/getVideo?camId=${this.camera.id}`\r\n      // this.fetchImage()\r\n      let iframe = document.getElementById(\"iframe\")\r\n      let canvas = document.getElementById('canvas')\r\n      iframe.style.setProperty('--width', iframe.width)\r\n      iframe.style.setProperty('--height', iframe.height)\r\n      iframe.style.setProperty('--x', )\r\n      this.imgPath = `http://localhost:5000/getVideo?camId=${this.camera.id}`\r\n      let interval = this.getRefreshInterval\r\n      if (interval){\r\n        console.log('clean')\r\n        this.$store.commit('clearRefreshInterval')\r\n      }\r\n      interval = setInterval(() => this.selectFunction(this.refreshVideo), 5000)\r\n      this.$store.commit('setRefreshInterval', interval)\r\n    },\r\n    refreshVideo() {\r\n      let returnResult\r\n      fetch(`http://localhost:5000/refreshVideo?camId=${this.camera.id}`, {\r\n        credentials: \"include\",\r\n        method: 'GET',\r\n        cors: 'no-cors',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n      })\r\n          .then(response => response.json())\r\n          .then((response) => {\r\n            returnResult = response\r\n            console.log(response)\r\n            if (response.answer === \"Stream is finished\") {\r\n              // fetch(`http://localhost:5000/getVideo?camId=${this.camera.id}`)\r\n                  // .then(this.drawImage)\r\n            }\r\n          });\r\n      return returnResult\r\n    },\r\n    chooseCamera(camera) {\r\n      this.resetCamera()\r\n      console.log(camera.id)\r\n      this.camera = this.getCameraByID(camera.id)\r\n      this.selectFunction(this.getSectorsByCameraIDFromDB)\r\n      this.cameraSelected = true\r\n      this.drawImage()\r\n      this.resetSector()\r\n    },\r\n    chooseSector(sector) {\r\n      if (this.sector.id === sector.id && sector.id !== null) {\r\n        console.log(this.sector.id + ' ' + sector.id + ' resetSec')\r\n        this.resetSector()\r\n      }\r\n      else if (sector.name === '' || sector.typeId === null) alert(\"Сначала введите название сектора и выберите его тип\")\r\n      else if (sector.id === null) {\r\n        let p1 = this.selectFunction(this.setSector, sector)\r\n        p1.then(value => {\r\n          console.log(value.id)\r\n          this.showSector(value)\r\n        })\r\n      }\r\n      else this.showSector(sector)\r\n    },\r\n    showSector(sector) {\r\n      if (sector.id !== null) {\r\n        this.sector = this.getSectorByID(sector.id)\r\n        this.sectorSelected = true\r\n        this.drawClear()\r\n        if (this.sector.points.length !== 0) {\r\n          this.drawSectorPoints()\r\n        }\r\n      }\r\n    },\r\n    resetCamera(){\r\n      this.imgPath = '@/assets/images/background.png'\r\n      // document.getElementById(\"camImg\").setAttribute(\"src\", '@/assets/images/background.png')\r\n      console.log('reset')\r\n      this.$store.state.sectors = []\r\n      let cameraCopy = Object.assign({}, this.camera)\r\n      this.camera = cameraCopy\r\n      this.camera.id = null\r\n      this.camera.roomID = null\r\n      this.camera.name = ''\r\n      this.camera.ip = ''\r\n      this.camera.codec = ''\r\n      this.camera.port = ''\r\n      this.camera.chanel = ''\r\n      this.camera.login = ''\r\n      this.camera.password = ''\r\n      this.camera.fullRoute = ''\r\n      this.cameraSelected = false\r\n      this.v$.camera.$reset()\r\n      this.resetSector()\r\n      this.drawClear()\r\n\r\n      if (this.getRefreshInterval){\r\n        console.log('clean')\r\n        this.$store.commit('clearRefreshInterval')\r\n      }\r\n    },\r\n    resetSector() {\r\n      this.drawClear()\r\n      let sectorCopy = Object.assign({}, this.sector)\r\n      this.sector = sectorCopy\r\n      this.sector.camId = null\r\n      this.sector.id = null\r\n      this.sector.name = ''\r\n      this.sector.points = []\r\n      this.sector.roomId = null\r\n      this.sector.typeId = null\r\n      this.sectorSelected = false\r\n    },\r\n    addSectorToCamera() {\r\n      console.log('p')\r\n      this.resetSector()\r\n      this.sector.camId = this.camera.id\r\n      this.$store.commit('setSector', Object.assign({}, this.sector))\r\n    },\r\n    selectFunction(func, value){\r\n      let respFunc\r\n      if (arguments.length === 2) respFunc = func(value)\r\n      else respFunc = func()\r\n      let refresh\r\n      // console.log('respFunc ' + respFunc)\r\n      if (respFunc === \"Bad token\") {\r\n        refresh = this.refreshToken()\r\n        if (refresh === \"ok\"){\r\n          // console.log('refreshOk')\r\n          respFunc = func()\r\n        }\r\n        if (respFunc === \"Bad token\") alert('logout pls')\r\n      }\r\n      else return respFunc\r\n    },\r\n    ...mapActions([\r\n        'addCamera',\r\n        'removeCamera',\r\n        'removeSector',\r\n        'refreshToken'\r\n    ])\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ncanvas {\r\n  border: 1px solid black;\r\n  background: none;\r\n}\r\n#preloaded {\r\n  position: inherit;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 999;\r\n  width: 100%;\r\n  height: 30%;\r\n  overflow: visible;\r\n  background: #fbfbfb url('//cdnjs.cloudflare.com/ajax/libs/file-uploader/3.7.0/processing.gif') no-repeat center center;\r\n}\r\n.hidden{\r\n  visibility: hidden;\r\n  opacity: 0;\r\n}\r\n.visible{\r\n  visibility: visible;\r\n  opacity: 1;\r\n}\r\n.window{\r\n  box-shadow: 0 3px 4px rgba(0,0,0,.25);\r\n  border-radius: 10px ;\r\n}\r\n.input-field{\r\n  outline: none;\r\n  width: 200px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.input-field-sector{\r\n  outline: none;\r\n  width: 150px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  margin-right: 15px;\r\n  border-radius: 5px ;\r\n  border: 1px solid grey;\r\n}\r\n.camera:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n.cam-name{\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  margin: 7px;\r\n}\r\n.cam-ip{\r\n  font-size: 12px;\r\n  font-weight: 300;\r\n  position: absolute;\r\n  right: 0;\r\n  margin-right: 30px;\r\n  margin-top: 10px;\r\n}\r\n.add{\r\n  width: 110px;\r\n  /*height: 35px;*/\r\n  position: absolute;\r\n  right: 0;\r\n  /*top: 0;*/\r\n  margin-right: 30px;\r\n  border-radius: 10px;\r\n  font-size: 18px;\r\n}\r\n.add:hover{\r\n  background-color: #dadada;\r\n}\r\n.field {\r\n  font-size: 22px;\r\n  font-weight: 700;\r\n}\r\n.hidden-button{\r\n  background: inherit;\r\n  border: none;\r\n  width: 25px;\r\n  /*vertical-align: center;*/\r\n}\r\n.hidden-button:hover{\r\n  background-color: #dadada;\r\n  cursor: pointer;\r\n}\r\n.iframe{\r\n  width: var(--width) ;\r\n  height: var(--height) ;\r\n  /*width: 1600px;*/\r\n  /*height: 900px;*/\r\n  border: 0;\r\n  /*-ms-transform: scale(0.25);*/\r\n  /*-moz-transform: scale(0.25);*/\r\n  /*-o-transform: scale(0.25);*/\r\n  -webkit-transform: scale(--x, --y);\r\n  /*transform: scale(0.25);*/\r\n\r\n  -ms-transform-origin: 0 0;\r\n  -moz-transform-origin: 0 0;\r\n  -o-transform-origin: 0 0;\r\n  -webkit-transform-origin: 0 0;\r\n  transform-origin: 0 0;\r\n}\r\n</style>"],"mappings":";;AA8KA,SAAQA,UAAU,QAAO,MAAK;AAC9B,SAAQC,UAAU,QAAO,MAAK;AAC9B,SAASC,YAAW,QAAS,iBAAgB;AAC7C,SAASC,QAAQ,EAAEC,OAAO,QAAO,uBAAsB;AAEvD,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAIA,CAAA,EAAK;IACP,OAAO;MACLC,EAAE,EAAEL,YAAY,CAAC;IACnB;EACF,CAAC;EACDM,IAAIA,CAAA,EAAE;IACJ,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,UAAU,EAAE,CAAC;MACbC,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE;QACNC,EAAC,EAAI,IAAI;QACTC,MAAM,EAAE,IAAI;QACZT,IAAI,EAAE,EAAE;QACRU,EAAE,EAAE,EAAE;QACNC,IAAI,EAAE,EAAE;QACRC,MAAK,EAAI,EAAE;QACXC,KAAI,EAAI,EAAE;QACVC,KAAI,EAAI,EAAE;QACVC,QAAO,EAAI,EAAE;QACbC,SAAS,EAAE;MACb,CAAC;MACDC,MAAM,EAAE;QACNC,KAAK,EAAE,IAAI;QACXV,EAAE,EAAE,IAAI;QACRR,IAAI,EAAE,EAAE;QACRmB,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE,IAAI;QACZC,MAAM,EAAE;MACV,CAAC;MACDC,cAAc,EAAE,KAAK;MACrBC,cAAc,EAAE;IAClB;EACF,CAAC;EACDC,WAAW,EAAE;IACXjB,MAAM,EAAE;MACNP,IAAI,EAAE;QAACF;MAAQ,CAAC;MAChBY,EAAE,EAAE;QAACZ;MAAQ,CAAC;MACda,IAAI,EAAE;QAACb,QAAQ;QAAEC;MAAO,CAAC;MACzBa,MAAM,EAAE;QAACd,QAAQ;QAAEC;MAAO,CAAC;MAC3Bc,KAAK,EAAE;QAACf;MAAQ,CAAC;MACjBgB,KAAK,EAAE;QAAEhB;MAAS,CAAC;MACnBiB,QAAQ,EAAE;QAACjB;MAAQ;IACrB;EACF,CAAC;EACD2B,QAAQ,EAAE;IACR,GAAG9B,UAAU,CAAC,CACV,YAAY,EACZ,eAAe,EACf,gBAAgB,EAChB,sBAAsB,EACtB,YAAY,EACZ,eAAe,EACf,mBAAmB,EACnB,oBAAmB,CACtB;EACH,CAAC;EACD+B,OAAOA,CAAA,EAAG;IACRC,OAAO,CAACC,GAAG,CAAC,gBAAgB;IAC5B,IAAI,IAAI,CAACC,UAAU,CAACC,MAAK,KAAM,CAAC,EAAC;MAC/B,IAAI,CAACC,cAAc,CAAC,IAAI,CAACC,gBAAgB;IAC3C;IACA,IAAI,IAAI,CAACC,cAAc,CAACH,MAAK,KAAM,CAAC,EAAC;MACnC,IAAI,CAACC,cAAc,CAAC,IAAI,CAACG,oBAAoB;IAC/C;IACA,IAAI,CAACC,IAAI,CAAC;EACZ,CAAC;EACDC,OAAO,EAAE;IACPF,oBAAoBA,CAAA,EAAG;MACrB,IAAIG,YAAW;MACfC,KAAK,CAAE,sCAAqC,EAAE;QAC5CC,WAAW,EAAE,SAAS;QACtBC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,EACIC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAAEC,QAAQ,IAAK;QAClBP,YAAW,GAAIO,QAAO;QACtBjB,OAAO,CAACC,GAAG,CAAC,cAAc;QAC1B,IAAI,CAACkB,MAAM,CAACC,KAAK,CAACC,WAAU,GAAIJ,QAAO;QACvCjB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACkB,MAAM,CAACC,KAAK,CAACC,WAAW;MAC3C,CAAC,CAAC;MACN,OAAOX,YAAW;IACpB,CAAC;IACDY,0BAA0BA,CAAA,EAAG;MAC3B,IAAIZ,YAAW;MACfC,KAAK,CAAE,iDAAgD,IAAI,CAAC/B,MAAM,CAACC,EAAG,EAAC,EAAE;QACvE+B,WAAW,EAAE,SAAS;QACtBC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,EACIC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAAEC,QAAQ,IAAK;QAClBP,YAAW,GAAIO,QAAO;QACtBjB,OAAO,CAACC,GAAG,CAAC,SAAS;QACrB;QACA;QACAD,OAAO,CAACC,GAAG,CAAC,UAAU;QACtBD,OAAO,CAACC,GAAG,CAACgB,QAAQ,CAAC,CAAC,CAAC;QACvB,IAAI,CAACE,MAAM,CAACC,KAAK,CAACG,OAAM,GAAIN,QAAO;QACnCjB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACkB,MAAM,CAACC,KAAK,CAACG,OAAO;MACvC,CAAC,CAAC;MACN,OAAOb,YAAW;IACpB,CAAC;IACDL,gBAAgBA,CAAA,EAAG;MACjB,IAAIK,YAAW;MACfC,KAAK,CAAC,kCAAkC,EAAE;QACxCC,WAAW,EAAE,SAAS;QACtB;QACAC,MAAM,EAAE,KAAK;QACb;QACAC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;UACP,cAAc,EAAE;UAChB;UACA;QACF;MACF,CAAC,EACIC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAAEC,QAAQ,IAAK;QAClBP,YAAW,GAAIO,QAAO;QACtBjB,OAAO,CAACC,GAAG,CAACgB,QAAQ;QACpB,IAAI,CAACE,MAAM,CAACC,KAAK,CAACI,OAAM,GAAIP,QAAO;MACrC,CAAC,CAAC;MACN,OAAQP,YAAW;IACrB,CAAC;IACDe,SAASA,CAACnC,MAAM,EAAC;MACfU,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIX,MAAM;MAC9B,OAAOqB,KAAK,CAAC,iCAAiC,EAAE;QAC9CC,WAAW,EAAE,SAAS;QACtBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB,OAAO,EAAEtC,MAAM,CAACC,KAAK;UACrB,IAAI,EAAED,MAAM,CAACT,EAAE;UACf,MAAM,EAAES,MAAM,CAACjB,IAAI;UACnB,QAAQ,EAAEiB,MAAM,CAACE,MAAM;UACvB,QAAQ,EAAEF,MAAM,CAACG,MAAM;UACvB,QAAQ,EAAEH,MAAM,CAACI;QACnB,CAAC;MACH,CAAC,EACIsB,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAAEC,QAAQ,IAAI;QACjBjB,OAAO,CAACC,GAAG,CAACgB,QAAQ;QACpB3B,MAAM,CAACT,EAAC,GAAIoC,QAAQ,CAACpC,EAAC;QACtB;QACA,IAAIS,MAAM,CAACT,EAAC,KAAM,IAAI,EAAE,OAAOoC,QAAO,MACjC,OAAO3B,MAAK;MACnB,CAAC;MACL;IACF,CAAC;;IACDuC,SAASA,CAAA,EAAG;MACV,OAAOlB,KAAK,CAAC,iCAAiC,EAAE;QAC9CC,WAAW,EAAE,SAAS;QACtBC,MAAM,EAAE,MAAM;QACd;QACAE,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB,QAAQ,EAAE,IAAI,CAAChD,MAAM,CAACK,MAAM;UAC5B,OAAO,EAAE,IAAI,CAACL,MAAM,CAACM,KAAK;UAC1B,IAAI,EAAE,IAAI,CAACN,MAAM,CAACC,EAAE;UACpB,IAAI,EAAE,IAAI,CAACD,MAAM,CAACG,EAAE;UACpB,MAAM,EAAE,IAAI,CAACH,MAAM,CAACI,IAAI;UACxB,OAAO,EAAE,IAAI,CAACJ,MAAM,CAACO,KAAK;UAC1B,MAAM,EAAE,IAAI,CAACP,MAAM,CAACP,IAAI;UACxB,UAAU,EAAE,IAAI,CAACO,MAAM,CAACQ,QAAQ;UAChC,WAAW,EAAE,IAAI,CAACR,MAAM,CAACS;QAC3B,CAAC;MACH,CAAC,EACI2B,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAAEC,QAAQ,IAAK;QAClBjB,OAAO,CAACC,GAAG,CAACgB,QAAQ;QACpB,IAAI,CAACrC,MAAM,CAACC,EAAC,GAAIoC,QAAQ,CAACpC,EAAC;QAC3B,IAAIiD,UAAS,GAAIC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACpD,MAAM;QAC9CoB,OAAO,CAACC,GAAG,CAAC,OAAO;QACnB,IAAI,IAAI,CAACgC,aAAa,CAACH,UAAU,CAACjD,EAAE,MAAMqD,SAAS,EAAE;UACnD,IAAI,CAACC,SAAS,CAACL,UAAU;UACzB9B,OAAO,CAACC,GAAG,CAAC,UAAU;QACxB;QACAD,OAAO,CAACC,GAAG,CAAC,SAAS;QACrB,IAAI,CAACmC,UAAU,CAACC,OAAO,CAAE/C,MAAM,IAAK;UAClCA,MAAM,CAACC,KAAI,GAAI,IAAI,CAACX,MAAM,CAACC,EAAC;UAC5B,IAAI,CAACuB,cAAc,CAAC,IAAI,CAACqB,SAAS,EAAEnC,MAAM;QAC5C,CAAC;QACD,OAAO2B,QAAO;MAChB,CAAC,CAAC;IACR,CAAC;IACDqB,IAAIA,CAAA,EAAG;MACL,IAAI,CAAC/D,EAAE,CAACK,MAAM,CAAC2D,MAAM,CAAC;MACtB,IAAI,CAAC,IAAI,CAAChE,EAAE,CAACK,MAAM,CAAC4D,MAAM,EAAE;QAC1BxC,OAAO,CAACC,GAAG,CAAC,0BAA0B;QACtC,IAAI,CAACG,cAAc,CAAC,IAAI,CAACyB,SAAS;MACpC,OACK7B,OAAO,CAACC,GAAG,CAAC,qBAAqB;IACxC,CAAC;IACDwC,OAAOA,CAAA,EAAG;MACR,IAAI,CAAChE,GAAG,CAACiE,MAAM,CAAC,IAAI,CAACpD,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACF,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClE,IAAI,CAACf,GAAG,CAACkE,MAAM,CAAC;MAChB,IAAI,CAAClE,GAAG,CAACmE,SAAQ,GAAI,yBAAwB;MAC7C,IAAI,CAACnE,GAAG,CAACoE,IAAI,CAAC;MACd,IAAI,CAACnE,UAAS,GAAI;IACpB,CAAC;IACDoE,QAAQA,CAACC,CAAC,EAAEC,CAAC,EAAC;MACZ,IAAI,IAAI,CAACpD,cAAc,EAAC;QACtB,IAAIqD,YAAW,GAAIC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACC,qBAAqB,CAAC;QAC3E,IAAIC,IAAG,GAAIN,CAAA,GAAIE,YAAY,CAACK,IAAG;QAC/B,IAAIC,IAAG,GAAIP,CAAA,GAAIC,YAAY,CAACO,GAAE;QAC9BxD,OAAO,CAACC,GAAG,CAAE,MAAK8C,CAAC,OAAOC,CAAC,UAAUK,IAAI,UAAUE,IAAI,UAAUN,YAAY,CAACK,IAAI,WAAWL,YAAY,CAACO,GAAI,EAAC;QAC/G,IAAI,IAAI,CAAC9E,UAAS,KAAM,CAAC,EAAE;UACzB,IAAI,CAACD,GAAG,CAACgF,MAAM,CAACJ,IAAI,EAAEE,IAAI;QAC5B,OACK,IAAI,CAAC9E,GAAG,CAACiE,MAAM,CAACW,IAAI,EAAEE,IAAI;QAC/B,IAAI,CAACjE,MAAM,CAACE,MAAM,CAACkE,IAAI,CAAC,CAACL,IAAI,EAAEE,IAAI,CAAC;QACpC,IAAI,CAAC9E,GAAG,CAACkF,GAAG,CAACN,IAAI,EAAEE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAEK,IAAI,CAACC,EAAC,GAAI,CAAC;QAC1C,IAAI,CAACpF,GAAG,CAACqF,WAAU,GAAI,mBAAkB;QACzC,IAAI,CAACrF,GAAG,CAACsF,SAAQ,GAAI;QACrB,IAAI,CAACtF,GAAG,CAACkE,MAAM,CAAC;QAChB,IAAI,CAACjE,UAAS,EAAG;MACnB,OACKsF,KAAK,CAAC,iBAAiB;IAC9B,CAAC;IACDxD,IAAIA,CAAA,EAAG;MACL,IAAIyD,MAAK,GAAIf,QAAQ,CAACC,cAAc,CAAC,QAAQ;MAC7C,IAAIc,MAAM,CAACC,UAAU,EAAE;QACrBlE,OAAO,CAACC,GAAG,CAAC,YAAY;QACxB,IAAI,CAACxB,GAAE,GAAIwF,MAAM,CAACC,UAAU,CAAC,IAAI;QACjC,IAAI,CAACzF,GAAG,CAAC0F,SAAS,CAAC;MACrB;IACF,CAAC;IACDC,kBAAkBA,CAAA,EAAE;MAClB,IAAI,CAAC3F,GAAG,CAAC4F,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG;MACjC,IAAI,CAAC/E,MAAM,CAACE,MAAK,GAAI,EAAC;MACtB,IAAI,CAACf,GAAG,CAAC0F,SAAS,CAAC;IACrB,CAAC;IACDG,SAASA,CAAA,EAAG;MACV,IAAI,CAAC7F,GAAG,CAAC4F,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG;MACjC,IAAI,CAAC5F,GAAG,CAAC0F,SAAS,CAAC;IACrB,CAAC;IACDI,gBAAgBA,CAAA,EAAG;MACjBvE,OAAO,CAACC,GAAG,CAAC,kBAAkB;MAC9B,IAAIT,MAAK,GAAI,IAAI,CAACF,MAAM,CAACE,MAAK;MAC9B,IAAI,CAACf,GAAG,CAACgF,MAAM,CAACjE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAI,CAACf,GAAG,CAACkF,GAAG,CAACnE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEoE,IAAI,CAACC,EAAC,GAAI,CAAC;MAC1D,KAAK,IAAIW,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIhF,MAAM,CAACW,MAAM,EAAEqE,CAAC,EAAE,EAAC;QACrC,IAAI,CAAC/F,GAAG,CAACiE,MAAM,CAAClD,MAAM,CAACgF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEhF,MAAM,CAACgF,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC/F,GAAG,CAACkF,GAAG,CAACnE,MAAM,CAACgF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEhF,MAAM,CAACgF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEZ,IAAI,CAACC,EAAC,GAAI,CAAC;MAC5D;MACA,IAAI,CAACpF,GAAG,CAACiE,MAAM,CAAClD,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAI,CAACf,GAAG,CAACqF,WAAU,GAAI,mBAAkB;MACzC,IAAI,CAACrF,GAAG,CAACmE,SAAQ,GAAI,yBAAwB;MAC7C,IAAI,CAACnE,GAAG,CAACsF,SAAQ,GAAI;MACrB,IAAI,CAACtF,GAAG,CAACkE,MAAM,CAAC;MAChB,IAAI,CAAClE,GAAG,CAACoE,IAAI,CAAC;MACd;IACF,CAAC;;IACD4B,UAAUA,CAAA,EAAE;MACV9D,KAAK,CAAE,wCAAuC,IAAI,CAAC/B,MAAM,CAACC,EAAG,EAAC,EAAE;QAC9DgC,MAAM,EAAE;MACV,CAAC,EACAG,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACyD,IAAI,CAAC,CAAC,EAChC1D,IAAI,CAAEC,QAAQ,IAAK;QAClBjB,OAAO,CAACC,GAAG,CAAC,MAAM;QAClB,IAAI0E,QAAO,GAAIC,GAAG,CAACC,eAAe,CAAC5D,QAAQ;QAC3C,IAAI6D,OAAM,GAAI5B,QAAQ,CAAC6B,aAAa,CAAC,KAAK;QAC1CD,OAAO,CAACE,GAAE,GAAIL,QAAO;QACrBG,OAAO,CAACjG,EAAC,GAAI,QAAO;QACpBmB,OAAO,CAACC,GAAG,CAAC6E,OAAO;QACnB,IAAIG,GAAE,GAAI/B,QAAQ,CAACC,cAAc,CAAC,QAAQ;QAC1C;QACA8B,GAAG,CAACC,WAAW,CAACJ,OAAO;MACzB,CAAC;IACH,CAAC;IACDK,SAASA,CAAA,EAAG;MACVnF,OAAO,CAACC,GAAG,CAAC,WAAW;;MAEvB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAImF,MAAK,GAAIlC,QAAQ,CAACC,cAAc,CAAC,QAAQ;MAC7C,IAAIc,MAAK,GAAIf,QAAQ,CAACC,cAAc,CAAC,QAAQ;MAC7CiC,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,SAAS,EAAEF,MAAM,CAACG,KAAK;MAChDH,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,UAAU,EAAEF,MAAM,CAACI,MAAM;MAClDJ,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,KAAO;MAChC,IAAI,CAAC3G,OAAM,GAAK,wCAAuC,IAAI,CAACC,MAAM,CAACC,EAAG;MACtE,IAAI4G,QAAO,GAAI,IAAI,CAACC,kBAAiB;MACrC,IAAID,QAAQ,EAAC;QACXzF,OAAO,CAACC,GAAG,CAAC,OAAO;QACnB,IAAI,CAACkB,MAAM,CAACwE,MAAM,CAAC,sBAAsB;MAC3C;MACAF,QAAO,GAAIG,WAAW,CAAC,MAAM,IAAI,CAACxF,cAAc,CAAC,IAAI,CAACyF,YAAY,CAAC,EAAE,IAAI;MACzE,IAAI,CAAC1E,MAAM,CAACwE,MAAM,CAAC,oBAAoB,EAAEF,QAAQ;IACnD,CAAC;IACDI,YAAYA,CAAA,EAAG;MACb,IAAInF,YAAW;MACfC,KAAK,CAAE,4CAA2C,IAAI,CAAC/B,MAAM,CAACC,EAAG,EAAC,EAAE;QAClE+B,WAAW,EAAE,SAAS;QACtBC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,EACIC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAAEC,QAAQ,IAAK;QAClBP,YAAW,GAAIO,QAAO;QACtBjB,OAAO,CAACC,GAAG,CAACgB,QAAQ;QACpB,IAAIA,QAAQ,CAAC6E,MAAK,KAAM,oBAAoB,EAAE;UAC5C;UACI;QAAA;MAER,CAAC,CAAC;MACN,OAAOpF,YAAW;IACpB,CAAC;IACDqF,YAAYA,CAACnH,MAAM,EAAE;MACnB,IAAI,CAACoH,WAAW,CAAC;MACjBhG,OAAO,CAACC,GAAG,CAACrB,MAAM,CAACC,EAAE;MACrB,IAAI,CAACD,MAAK,GAAI,IAAI,CAACqD,aAAa,CAACrD,MAAM,CAACC,EAAE;MAC1C,IAAI,CAACuB,cAAc,CAAC,IAAI,CAACkB,0BAA0B;MACnD,IAAI,CAAC3B,cAAa,GAAI,IAAG;MACzB,IAAI,CAACwF,SAAS,CAAC;MACf,IAAI,CAACc,WAAW,CAAC;IACnB,CAAC;IACDC,YAAYA,CAAC5G,MAAM,EAAE;MACnB,IAAI,IAAI,CAACA,MAAM,CAACT,EAAC,KAAMS,MAAM,CAACT,EAAC,IAAKS,MAAM,CAACT,EAAC,KAAM,IAAI,EAAE;QACtDmB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,MAAM,CAACT,EAAC,GAAI,GAAE,GAAIS,MAAM,CAACT,EAAC,GAAI,WAAW;QAC1D,IAAI,CAACoH,WAAW,CAAC;MACnB,OACK,IAAI3G,MAAM,CAACjB,IAAG,KAAM,EAAC,IAAKiB,MAAM,CAACI,MAAK,KAAM,IAAI,EAAEsE,KAAK,CAAC,qDAAqD,OAC7G,IAAI1E,MAAM,CAACT,EAAC,KAAM,IAAI,EAAE;QAC3B,IAAIsH,EAAC,GAAI,IAAI,CAAC/F,cAAc,CAAC,IAAI,CAACqB,SAAS,EAAEnC,MAAM;QACnD6G,EAAE,CAACnF,IAAI,CAACoF,KAAI,IAAK;UACfpG,OAAO,CAACC,GAAG,CAACmG,KAAK,CAACvH,EAAE;UACpB,IAAI,CAACwH,UAAU,CAACD,KAAK;QACvB,CAAC;MACH,OACK,IAAI,CAACC,UAAU,CAAC/G,MAAM;IAC7B,CAAC;IACD+G,UAAUA,CAAC/G,MAAM,EAAE;MACjB,IAAIA,MAAM,CAACT,EAAC,KAAM,IAAI,EAAE;QACtB,IAAI,CAACS,MAAK,GAAI,IAAI,CAACgH,aAAa,CAAChH,MAAM,CAACT,EAAE;QAC1C,IAAI,CAACe,cAAa,GAAI,IAAG;QACzB,IAAI,CAAC0E,SAAS,CAAC;QACf,IAAI,IAAI,CAAChF,MAAM,CAACE,MAAM,CAACW,MAAK,KAAM,CAAC,EAAE;UACnC,IAAI,CAACoE,gBAAgB,CAAC;QACxB;MACF;IACF,CAAC;IACDyB,WAAWA,CAAA,EAAE;MACX,IAAI,CAACrH,OAAM,GAAI,gCAA+B;MAC9C;MACAqB,OAAO,CAACC,GAAG,CAAC,OAAO;MACnB,IAAI,CAACkB,MAAM,CAACC,KAAK,CAACG,OAAM,GAAI,EAAC;MAC7B,IAAIO,UAAS,GAAIC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACpD,MAAM;MAC9C,IAAI,CAACA,MAAK,GAAIkD,UAAS;MACvB,IAAI,CAAClD,MAAM,CAACC,EAAC,GAAI,IAAG;MACpB,IAAI,CAACD,MAAM,CAACE,MAAK,GAAI,IAAG;MACxB,IAAI,CAACF,MAAM,CAACP,IAAG,GAAI,EAAC;MACpB,IAAI,CAACO,MAAM,CAACG,EAAC,GAAI,EAAC;MAClB,IAAI,CAACH,MAAM,CAACM,KAAI,GAAI,EAAC;MACrB,IAAI,CAACN,MAAM,CAACI,IAAG,GAAI,EAAC;MACpB,IAAI,CAACJ,MAAM,CAACK,MAAK,GAAI,EAAC;MACtB,IAAI,CAACL,MAAM,CAACO,KAAI,GAAI,EAAC;MACrB,IAAI,CAACP,MAAM,CAACQ,QAAO,GAAI,EAAC;MACxB,IAAI,CAACR,MAAM,CAACS,SAAQ,GAAI,EAAC;MACzB,IAAI,CAACM,cAAa,GAAI,KAAI;MAC1B,IAAI,CAACpB,EAAE,CAACK,MAAM,CAAC2H,MAAM,CAAC;MACtB,IAAI,CAACN,WAAW,CAAC;MACjB,IAAI,CAAC3B,SAAS,CAAC;MAEf,IAAI,IAAI,CAACoB,kBAAkB,EAAC;QAC1B1F,OAAO,CAACC,GAAG,CAAC,OAAO;QACnB,IAAI,CAACkB,MAAM,CAACwE,MAAM,CAAC,sBAAsB;MAC3C;IACF,CAAC;IACDM,WAAWA,CAAA,EAAG;MACZ,IAAI,CAAC3B,SAAS,CAAC;MACf,IAAIkC,UAAS,GAAIzE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC1C,MAAM;MAC9C,IAAI,CAACA,MAAK,GAAIkH,UAAS;MACvB,IAAI,CAAClH,MAAM,CAACC,KAAI,GAAI,IAAG;MACvB,IAAI,CAACD,MAAM,CAACT,EAAC,GAAI,IAAG;MACpB,IAAI,CAACS,MAAM,CAACjB,IAAG,GAAI,EAAC;MACpB,IAAI,CAACiB,MAAM,CAACE,MAAK,GAAI,EAAC;MACtB,IAAI,CAACF,MAAM,CAACG,MAAK,GAAI,IAAG;MACxB,IAAI,CAACH,MAAM,CAACI,MAAK,GAAI,IAAG;MACxB,IAAI,CAACE,cAAa,GAAI,KAAI;IAC5B,CAAC;IACD6G,iBAAiBA,CAAA,EAAG;MAClBzG,OAAO,CAACC,GAAG,CAAC,GAAG;MACf,IAAI,CAACgG,WAAW,CAAC;MACjB,IAAI,CAAC3G,MAAM,CAACC,KAAI,GAAI,IAAI,CAACX,MAAM,CAACC,EAAC;MACjC,IAAI,CAACsC,MAAM,CAACwE,MAAM,CAAC,WAAW,EAAE5D,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC1C,MAAM,CAAC;IAChE,CAAC;IACDc,cAAcA,CAACsG,IAAI,EAAEN,KAAK,EAAC;MACzB,IAAIO,QAAO;MACX,IAAIC,SAAS,CAACzG,MAAK,KAAM,CAAC,EAAEwG,QAAO,GAAID,IAAI,CAACN,KAAK,OAC5CO,QAAO,GAAID,IAAI,CAAC;MACrB,IAAIG,OAAM;MACV;MACA,IAAIF,QAAO,KAAM,WAAW,EAAE;QAC5BE,OAAM,GAAI,IAAI,CAACC,YAAY,CAAC;QAC5B,IAAID,OAAM,KAAM,IAAI,EAAC;UACnB;UACAF,QAAO,GAAID,IAAI,CAAC;QAClB;QACA,IAAIC,QAAO,KAAM,WAAW,EAAE3C,KAAK,CAAC,YAAY;MAClD,OACK,OAAO2C,QAAO;IACrB,CAAC;IACD,GAAG1I,UAAU,CAAC,CACV,WAAW,EACX,cAAc,EACd,cAAc,EACd,cAAa,CAChB;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}